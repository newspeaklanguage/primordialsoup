class Intermediates usingPlatform: p internalKernel: k = (|
private List = p collections List.
private Map = p collections Map.
private Method = k Method.
private SlotDeclaration = k SlotDeclaration.
|) (
public class IntermediateClassDeclaration = (|
public name
public headerSource
public factoryName
public instanceSide = IntermediateMixin for: self isMeta: false.
public classSide = IntermediateMixin for: self isMeta: true.
public enclosingClass <IntermediateMixin>
public builder <ClassDeclarationBuilder>
public existingMixin
public accessor <IntermediateMethod>
public factory <IntermediateMethod>
public initializers <List[IntermediateMethod]>
|) (
public accessModifier ^<Symbol> = (
	isTopLevel ifTrue: [^#public].
	^accessor accessModifier
)
public addSyntheticSlotsTo: slots = (
	| slot = IntermediateSlotDeclaration new. |
	slot name: (name, '`slot') asSymbol.
	slot isMutable: true.
	slot accessModifier: #private.
	slots add: slot.
)
public isTopLevel = (
	nil = enclosingClass ifFalse: [^false].
	(* No enclosing class computed yet, but might be just be deferred. *)
	nil = existingMixin ifTrue: [^true (* New class declarations are eagerly computed. *)].
	^nil = existingMixin _enclosingMixin
)
) : (
)
public class IntermediateMethod = (|
public method <CompiledMethod>
public debugInfo
public maxStack <Integer>
public maxLocals <Integer>
public argCount <Integer>
public literals <OrderedCollection[Object]>
public bytes <OrderedCollection[Byte]> ::= List new.
public selector <Symbol>
public methodMixin <AbstractMixin>
public source <String>
public primitive ::= 0.
public accessModifier <Symbol>

public isSynthetic ::= false.
public builder
|) (
public bci ^<Integer> = (
	^bytes size + 1
)
public byte: b <Integer> = (
	assert: [0 <= b and: [b <= 255]] message: 'Bytecode out of range'.
	bytes add: b
)
public byteAt: index <Integer> ^<Integer> = (
	^bytes at: index
)
public byteAt: index <Integer> put: datum <Integer> = (
	bytes at: index put: datum
)
public compiledMethod ^<CompiledMethod> = (
	| bc |
	nil = method ifFalse: [^method].

	assert: [argCount <= maxLocals] message: ''.

	method:: Method new.
	method header:
		(Method
			headerForAccessModifier: accessModifier
			primitive: primitive
			numTemps: maxLocals
			numArgs: argCount).

	method literals: literals asArray.

	bc:: ByteArray new: bytes size.
	1 to: bytes size do: [:index | bc at: index put: (bytes at: index)].
	method bytecode: bc.
	method mixin: methodMixin.
	method selector: selector.

	isSynthetic
		ifTrue:
			[method metadata: nil]
		ifFalse:
			[assert: [source isKindOfString] message: 'Missing source'.
			 method metadata: source].

	literals:: nil.
	bytes:: nil.

	^method
)
public name = (
	^selector
)
) : (
)
public class IntermediateMixin for: d isMeta: m = (|
public declaration <IntermediateClassDeclaration> = d.
public isMeta <Boolean> = m.
public slots <List[IntermediateSlotDeclaration]> ::= List new.
public transientSlots <List[IntermediateTransientSlotDeclaration]> ::= List new.
public methods <List[IntermediateMethod]> = List new.
public nestedClasses <List[IntermediateClassDeclaration]> = List new.
public builder <MixinBuilder>
|) (
public assembleMethods = (
	| assembledMethods = List new. |
	assembledMethods addAll: methods.
	assembleSlots do: [:slot | slot addSyntheticMethodsTo: assembledMethods].
	nestedClasses do: [:nestedClass | assembledMethods add: nestedClass accessor].
	transientSlots do: [:transientSlot | transientSlot addSyntheticMethodsTo: assembledMethods].
	isMeta
		ifTrue: [assembledMethods add: declaration factory]
		ifFalse: [assembledMethods addAll: declaration initializers].
	^assembledMethods
)
public assembleSlots = (
	| assembledSlots = List new. |
	assembledSlots addAll: slots.
	nestedClasses do: [:nestedClass | nestedClass addSyntheticSlotsTo: assembledSlots].
	transientSlots do: [:transientSlot | transientSlot addSyntheticSlotsTo: assembledSlots].
	^assembledSlots
)
checkForFactory: selector = (
	isMeta ifTrue:
		[declaration factoryName = selector ifTrue:
			[^Error signal: 'Class already has primary factory named ', selector]].
)
checkForMethod: selector = (
	methods do:
		[:method |
		method selector = selector ifTrue:
			[^Error signal: 'Class already has method named ', selector]].
)
checkForNestedClass: selector = (
	nestedClasses do:
		[:nestedClass |
		nestedClass name = selector ifTrue:
			[^Error signal: 'Class already has nested class named ', selector]].
)
checkForSlot: selector = (
	slots do:
		[:slot |
		slot name = selector ifTrue:
			[^Error signal: 'Class already has slot named ', selector].
		(slot isMutable and: [(slot name, ':') = selector]) ifTrue:
			[^Error signal: 'Class already has mutable slot named ', selector]].
)
checkForTransientSlot: selector = (
	transientSlots do:
		[:slot |
		slot name = selector ifTrue:
			[^Error signal: 'Class already has transient slot named ', selector].
		(slot isMutable and: [(slot name, ':') = selector]) ifTrue:
			[^Error signal: 'Class already has mutable transient slot named ', selector]].
)
public checkNameConflictsForFactory: selector <Symbol> = (
	assert: [isMeta] message: ''.
	checkForMethod: selector.
)
public checkNameConflictsForMethod: selector <Symbol> = (
	checkForNestedClass: selector.
	isMeta
		ifFalse:
			[checkForSlot: selector.
			 checkForTransientSlot: selector]
		ifTrue:
			[checkForFactory: selector].
)
public checkNameConflictsForNestedClass: klassName <Symbol> = (
	checkForMethod: klassName.
	checkForSlot: klassName.
	checkForTransientSlot: klassName.
)
public checkNameConflictsForSlot: slotName <Symbol> mutable: isMutable <Boolean> = (
	checkForNestedClass: slotName.
	checkForTransientSlot: slotName.
	checkForMethod: slotName.
	isMutable ifTrue: [checkForMethod: slotName, ':'].
)
public checkNameConflictsForTransientSlot: slotName <Symbol> mutable: isMutable <Boolean> = (
	checkForNestedClass: slotName.
	checkForSlot: slotName.
	checkForMethod: slotName.
	isMutable ifTrue: [checkForMethod: slotName, ':'].
)
) : (
)
public class IntermediateSlotDeclaration = (|
public name
public isMutable
public accessModifier
public isTransient ::= false.
public metadata
|) (
public addSyntheticMethodsTo: methods = (
	| index = 1. |
	methods add: (generateInitializerForSlot: index).
	methods add: (generateGetterForSlot: index).
	isMutable ifTrue: [methods add: (generateSetterForSlot: index)].
)
public compiledSlot = (
	^SlotDeclaration new
		name: name;
		isMutable: isMutable;
		isTransient: isTransient;
		accessModifier: accessModifier;
		metadata: metadata
)
public generateGetterForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: accessModifier.
	method method: (Method newGetterForSlot: name at: index accessModifier: accessModifier).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
public generateInitializerForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: #private.
	method method: (Method newInitializerForSlot: name at: index).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
public generateSetterForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: accessModifier.
	method method: (Method newSetterForSlot: name at: index accessModifier: accessModifier).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
) : (
)
public class IntermediateTransientSlotDeclaration = (
	|
	public name <Symbol>
	public source <String>
	public initializer <IntermediateMethod>
	public getter <IntermediateMethod>
	public setter <IntermediateMethod>
	|
) (
public accessModifier = (
	^getter accessModifier
)
public addSyntheticMethodsTo: methods = (
	methods add: initializer.
	methods add: getter.
	isMutable ifTrue: [methods add: setter].
)
public addSyntheticSlotsTo: slots = (
	| slot = IntermediateSlotDeclaration new. |
	slot name: (class slotNameForTransientSlotNamed: name).
	slot isMutable: isMutable.
	slot accessModifier: #private.
	slot isTransient: true.
	slot metadata: source.
	slots add: slot.
)
public isMutable = (
	^setter isNil not
)
) : (
public initMethodNameForTransientSlotNamed: selector = (
	^(selector, '`init') asSymbol
)
public slotNameForTransientSlotNamed: selector = (
	^(selector, '`slot') asSymbol
)
)
) : (
)
