class CompilerApp packageUsing: manifest = (
) (
class CommandLineCompiler usingPlatform: platform = (
|
	private List = platform collections List.
	private Map = platform collections Map.
	private ClassDeclarationBuilder = platform mirrors ClassDeclarationBuilder.
	private Port = platform actors Port.
	private Snapshotter = platform victoryFuel Snapshotter.
	private numberOfProcessors = platform numberOfProcessors.
|
) (
childMain: args = (
	| replyPort result |
	replyPort:: Port fromId: (args at: 2).
	result:: List new.

	3 to: args size do: [:index | result add: (compileFile: (args at: index))].

	replyPort send: result asArray.
)
compileFile: filename = (
	| source builder |
	source:: String withAll: (readFileAsBytes: filename).
	^[builder:: ClassDeclarationBuilder fromSource: source.
	  builder install applyToObject reflectee]
		on: Exception
		do: [:ex | describeError: ex path: filename source: source. ex pass].
)
compileSources: sourcePaths binaries: binaryPaths outputs: outputTuples = (
	|
	namespace = Map new.
	port = Port new.
	outstanding ::= 0.
	|

	1 to: numberOfProcessors do:
		[:jobIndex |
		 | worklist = List new. |
		 worklist add: 'child'.
		 worklist add: port id.
		 jobIndex to: sourcePaths size by: numberOfProcessors do:
			[:sourceIndex | worklist add: (sourcePaths at: sourceIndex)].
		 port spawn: worklist asArray.
		 outstanding:: outstanding + 1].

	binaryPaths do:
		[:binaryPath |
		 namespace
			at: (binaryPath copyFrom: 1 to: (binaryPath indexOf: '.') - 1).
			put: (readFileAsBytes: binaryPath)].

	port handler:
		[:klasses |
		 klasses do: [:klass | namespace at: klass name put: klass].
		 outstanding:: outstanding - 1.
		 outstanding = 0 ifTrue:
			[port close.
			 createSnapshotsFromNamespace: namespace outputs: outputTuples]].
)
createSnapshotsFromNamespace: namespace outputs: outputTuples = (
	| manifest = Manifest forNamespace: namespace. |
	1 to: outputTuples size by: 3 do:
		[:index | | runtimeName appName snapshotName runtime app bytes |
		runtimeName:: outputTuples at: index.
		appName:: outputTuples at: index + 1.
		snapshotName:: outputTuples at: index + 2.
		runtime:: (namespace at: runtimeName) packageRuntimeUsing: manifest.
		app:: (namespace at: appName) packageUsing: manifest.
		bytes:: Snapshotter new
			snapshotApp: app
			withRuntime: runtime
			keepSource: (appName = 'TestRunner').
		writeBytes: bytes toFileNamed: snapshotName].
)
describeError: ex path: path source: source = (
	ex isKindOfParseError
		ifTrue:
			[ | line ::= 1. lastLine ::= 0. column |
			 1 to: ex position do:
				[:index | (source at: index) = 10 (* LF *) ifTrue:
					[line:: line + 1. lastLine:: index]].
			 column:: ex position - lastLine.
			 (* This matches GCC's format, which lets various tools automatically jump to the position. *)
			 (path, ':', line asString, ':', column asString, ': error: ', ex message) out]
		ifFalse:
			[(path, ':0: error: ', ex printString) out].
)
public main: args = (
	(args at: 1) = 'child'
		ifTrue: [childMain: args]
		ifFalse: [parentMain: args].
)
parentMain: args = (
	|
	sourcePaths = List new.
	binaryPaths = List new.
	outputTuples = List new.
	index ::= 1.
	arg
	|
	[arg:: args at: index.
	 (arg indexOf: '.') > 0] whileTrue:
		[(arg endsWith: '.ns')
			ifTrue: [sourcePaths add: arg]
			ifFalse: [binaryPath add: arg].
		 index:: index + 1].
	[index <= args size] whileTrue:
		[outputTuples add: (args at: index).
		 index:: index + 1].

	compileSources: sourcePaths binaries: binaryPaths outputs: outputTuples.
)
readFileAsBytes: filename = (
	(* :pragma: primitive: 510 *)
	halt.
)
writeBytes: bytes toFileNamed: filename = (
	(* :pragma: primitive: 511 *)
	halt.
)
) : (
)
class Manifest forNamespace: ns = (|
namespace = ns.
|) (
protected doesNotUnderstand: message = (
	^namespace at: message selector ifAbsent: [Error signal: 'Missing ', message selector]
)
) : (
)
public main: platform args: args = (
	^(CommandLineCompiler usingPlatform: platform) main: args
)
) : (
)
