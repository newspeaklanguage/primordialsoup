class SerializationTesting usingPlatform: p minitest: m resources: r = (|
private WeakArray = p kernel WeakArray.
private Ephemeron = p kernel Ephemeron.
private Map = p collections Map.
private Set = p collections Set.
private Serializer = p serialization Serializer.
private Deserializer = p serialization Deserializer.
private TestContext = m TestContext.
private SerializationTestApp = r SerializationTestApp.
private SerializationTestStruct = r SerializationTestStruct.
private testClosureAdd = r testClosureAdd.
private testClosureNLR = r testClosureNLR.
private testFloat = r testFloat.
|) (
public class SerializationTests = TestContext () (
roundTrip: object = (
	|
	serializer
	bytes
	deserializer
	|
	serializer:: Serializer new.
	bytes:: serializer serialize: object.
	deserializer:: Deserializer new.
	^deserializer deserialize: bytes.
)
public testArrays = (
	| before after |
	before:: {}.
	after:: roundTrip: before.
	assert: after isKindOfArray.
	assert: after size equals: 0.

	before:: {true. false. nil}.
	after:: roundTrip: before.
	assert: after isKindOfArray.
	assert: after size equals: 3.
	assert: (after at: 1) equals: true.
	assert: (after at: 2) equals: false.
	assert: (after at: 3) equals: nil.

	before:: Array new: 1.
	before at: 1 put: before.
	after:: roundTrip: before.
	assert: after isKindOfArray.
	assert: after size equals: 1.
	assert: (after at: 1) equals: after.
)
public testByteArrays = (
	| before after |
	before:: ByteArray new: 4.
	before at: 2 put: 16rA.
	before at: 4 put: 16rB.
	after:: roundTrip: before.
	assert: after size equals: 4.
	assert: (after at: 1) equals: 0.
	assert: (after at: 2) equals: 16rA.
	assert: (after at: 3) equals: 0.
	assert: (after at: 4) equals: 16rB.
)
public testClosureLoadedByVM = (
	(* Most of the cluster types are used by every program, but the VM's deserializer won't see closures or activations unless one is saved during packageUsing:. *)
	assert: testClosureAdd isKindOfClosure.
	assert: (testClosureAdd value: 3 value: 4) equals: 7.

	assert: testClosureNLR isKindOfClosure.
	should: [testClosureNLR value] signal: Error.
)
public testClosures = (
	| before after |
	before:: outer SerializationTesting class additionClosure.
	assert: before isKindOfClosure.
	assert: (before value: 3 value: 4) equals: 7.
	after:: roundTrip: before.
	assert: after isKindOfClosure.
	assert: (after value: 3 value: 4) equals: 7.
)
public testEphemerons = (
	| before after |
	(* nil'd *)
	before:: Ephemeron new.
	before key: Object new.
	before value: 'goodbye!'.
	after:: roundTrip: before.
	assert: after key equals: nil.
	assert: after value equals: nil.

	(* not nil'd *)
	before:: Array new: 2.
	before at: 1 put: (Ephemeron new).
	before at: 2 put: Object new.
	(before at: 1) key: (before at: 2).
	(before at: 1) value: 'survives!'.
	after:: roundTrip: before.
	assert: ((after at: 1) key) equals: (after at: 2).
	assert: ((after at: 1) value) equals: 'survives!'.
)
public testFloatLoadedByVM = (
	(* Most of the cluster types are used by every program, but the VM's deserializer won't see floats unless one is saved during packageUsing:. *)
	assert: testFloat isKindOfFloat.
	assert: testFloat equals: 0.5 asFloat.
)
public testFloats = (
	| before after |
	before:: Float parse: '0.0'.
	assert: before isKindOfFloat.
	assert: before asString equals: '0.0'.
	after:: roundTrip: before.
	assert: after isKindOfFloat.
	assert: after equals: before.
	assert: after asString equals: '0.0'.

	before:: Float parse: '-0.0'.
	assert: before isKindOfFloat.
	assert: before asString equals: '-0.0'.
	after:: roundTrip: before.
	assert: after isKindOfFloat.
	assert: after equals: before.
	assert: after asString equals: '-0.0'.

	before:: Float parse: 'Infinity'.
	after:: roundTrip: before.
	assert: after isKindOfFloat.
	assert: after equals: before.
	assert: after asString equals: 'Infinity'.

	before:: Float parse: '-Infinity'.
	after:: roundTrip: before.
	assert: after isKindOfFloat.
	assert: after equals: before.
	assert: after asString equals: '-Infinity'.

	before:: Float parse: 'NaN'.
	after:: roundTrip: before.
	assert: after isKindOfFloat.
	assert: after asString equals: 'NaN'.
)
public testFractions = (
	| before after |
	before:: 0.75.
	assert: before isKindOfFraction.
	assert: before asString equals: '(3/4)'.
	after:: roundTrip: before.
	assert: after isKindOfFraction.
	assert: after equals: before.
	assert: after asString equals: '(3/4)'.
)
public testHelloApp = (
	| before after |
	before:: SerializationTestApp new.
	assert: before main equals: 42.
	after:: roundTrip: before.
	assert: after main equals: 42.
)
public testLargeIntegers = (
	assert: (roundTrip: -1 << 63 - 1) equals: -1 << 63 - 1. (* largestNegativeLargeInteger *)
	assert: (roundTrip: 1 << 63) equals: 1 << 63. (* smallestPositiveLargeInteger *)

	assert: (roundTrip: 16rABABABABABABABAB) equals: 16rABABABABABABABAB.
	assert: (roundTrip: 16r7373737373737373) equals: 16r7373737373737373.

	assert: (roundTrip: 0 - 16rABABABABABABABAB) equals: 0 - 16rABABABABABABABAB.
	assert: (roundTrip: 0 - 16r7373737373737373) equals: 0 -16r7373737373737373.
)
public testMaps = (
	| beforeKeys beforeValues beforeMap before afterKeys afterValues afterMap after |

	beforeKeys:: {Object new. Object new. Object new}.
	beforeValues:: {Object new. Object new. Object new}.
	beforeMap:: Map new.
	1 to: 3 do:
		[:i | beforeMap at: (beforeKeys at: i) put: (beforeValues at: i)].
	before:: {beforeKeys. beforeValues. beforeMap}.

	after:: roundTrip: before.
	afterKeys:: after at: 1.
	afterValues:: after at: 2.
	afterMap:: after at: 3.
	assert: afterMap isKindOfMap.
	assert: afterMap size equals: 3.
	1 to: 3 do:
		[:i | assert: (afterMap at: (afterKeys at: i)) equals: (afterValues at: i)].
	deny: afterMap equals: beforeMap.
)
public testMediumIntegers = (
	assert: (roundTrip: -1 << 31) equals: -1 << 31. (* minInt32 *)
	assert: (roundTrip: -1 << 62) equals: -1 << 62. (* minInt63 *)
	assert: (roundTrip: -1 << 63) equals: -1 << 63. (* minInt63 *)

	assert: (roundTrip: 1 << 31 - 1) equals: 1 << 31 - 1. (* maxInt32 *)
	assert: (roundTrip: 1 << 62 - 1) equals: 1 << 62 - 1. (* maxInt63 *)
	assert: (roundTrip: 1 << 63 - 1) equals: 1 << 63 - 1. (* maxInt64 *)

	assert: (roundTrip: 16r6996699669966996) equals: 16r6996699669966996.
)
public testOddballs = (
	assert: (roundTrip: nil) equals: nil.
	assert: (roundTrip: false) equals: false.
	assert: (roundTrip: true) equals: true.
)
public testSets = (
	| beforeElements beforeSet before afterElements afterSet after |

	beforeElements:: {Object new. Object new. Object new}.
	beforeSet:: Set new.
	1 to: 3 do:
		[:i | beforeSet add: (beforeElements at: i)].
	before:: {beforeElements. beforeSet}.

	after:: roundTrip: before.
	afterElements:: after at: 1.
	afterSet:: after at: 2.
	assert: afterSet isKindOfSet.
	assert: afterSet size equals: 3.
	1 to: 3 do:
		[:i | assert: (afterSet includes: (afterElements at: i))].
	deny: afterSet equals: beforeSet.
)
public testSmallIntegers = (
	assert: (roundTrip: 0) equals: 0.

	assert: (roundTrip: 16r7FFF) equals: 16r7FFF.
	assert: (roundTrip: -32768) equals: -32768. (* -16r8000 *)

	assert: (roundTrip: 16r3FFFFFFF) equals: 16r3FFFFFFF.
	assert: (roundTrip: -1073741824) equals: -1073741824. (* -16r40000000 *)
)
public testStrings = (
	| before after |
	before:: 'foo' , 'bar'.
	after:: roundTrip: before.
	assert: after equals: before.
	assert: after hash equals: before hash.

	before:: ('foo' , 'baz') asSymbol.
	after:: roundTrip: before.
	assert: after equals: before.
	assert: after hash equals: before hash.

	before:: 'Îñţérñåţîöñåļ' , 'îžåţîờñ'.
	after:: roundTrip: before.
	assert: after equals: before.
	assert: after hash equals: before hash.

	before:: ('Îñţérñåţîöñåļ' , 'îžåţîờñ') asSymbol.
	after:: roundTrip: before.
	assert: after equals: before.
	assert: after hash equals: before hash.
)
public testTransientSlots = (
	| before after |
	before:: SerializationTestStruct new.
	assert: before counter equals: 0.
	assert: before transientSlot equals: 1.
	assert: before counter equals: 1.

	after:: roundTrip: before.
	assert: after counter equals: 1.
	assert: after transientSlot equals: 2.
	assert: after counter equals: 2.
	assert: before transientSlot equals: 1.
	assert: before counter equals: 1.
)
public testWeakArrays = (
	| before after |
	(* nil'd *)
	before:: WeakArray new: 1.
	before at: 1 put: 'goodbye!'.
	after:: roundTrip: before.
	assert: after isKindOfWeakArray.
	assert: after size equals: 1.
	assert: (after at: 1) equals: nil.

	(* not nil'd *)
	before:: Array new: 2.
	before at: 1 put: (WeakArray new: 1).
	before at: 2 put: Object new.
	(before at: 1) at: 1 put: (before at: 2).
	after:: roundTrip: before.
	assert: ((after at: 1) at: 1) equals: (after at: 2).
)
) : (
TEST_CONTEXT = ()
)
) : (
public additionClosure = (
	(* Putting this on the class side so serializing the receiver doesn't drag in the universe. *)
	^[:x :y | x + y]
)
)
