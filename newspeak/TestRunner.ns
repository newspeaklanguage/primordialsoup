class TestRunner packageUsing: manifest = (|
Minitest = manifest Minitest.
testConfigs = {
	manifest KernelTestsConfiguration packageTestsUsing: manifest.
	manifest KernelWeakTestsConfiguration packageTestsUsing: manifest.
	manifest TimeTestsConfiguration packageTestsUsing: manifest.
	manifest RandomTestsConfiguration packageTestsUsing: manifest.
	manifest MinitestTestsConfiguration packageTestsUsing: manifest.
	manifest AccessModifierTestingConfiguration packageTestsUsing: manifest.
	manifest ActorsTestingConfiguration packageTestsUsing: manifest.
	manifest CollectionsTestingConfiguration packageTestsUsing: manifest.
	manifest SerializationTestingConfiguration packageTestsUsing: manifest.
	manifest MirrorTestingConfiguration packageTestsUsing: manifest.
	manifest MirrorBuilderTestingConfiguration packageTestsUsing: manifest.
	manifest ActivationMirrorTestingConfiguration packageTestsUsing: manifest.
	manifest ZirconTestingConfiguration packageTestsUsing: manifest.
	manifest JSTestingConfiguration packageTestsUsing: manifest.
	manifest JSONTestingConfiguration packageTestsUsing: manifest.
	manifest NS2PrimordialSoupCompilerTestingConfiguration packageTestsUsing: manifest.
}.
Promise
|) (
private exit: code = (
	(* :pragma: primitive: 189 *)
	panic.
)
public main: platform args: args = (
	| keepAlive stopwatch minitest testModules tester |
	keepAlive:: platform actors Port new.
	Promise:: platform actors Promise.
	stopwatch:: platform time Stopwatch new start.
	minitest:: Minitest usingPlatform: platform.
	testModules:: platform collections List new.
	testConfigs do:
		[:testConfig |
		testModules addAll:
			(testConfig testModulesUsingPlatform: platform minitest: minitest)].
	tester:: minitest Tester testModules: testModules asArray.
	tester prepare.


	Promise when: (runTests: tester) fulfilled:
		[(tester successes size printString, ' successes, ',
		 tester failures size printString, ' failures, ',
		 tester errors size printString, ' errors, ',
		 stopwatch elapsedMilliseconds asString, ' ms') out.
		 '' out.

		 tester haveAllTestsSucceeded ifFalse: [exit: -1].
		 keepAlive close.
		 exit: 0].
)
runTests: tester = (
	tester atEnd ifTrue: [^self].
	tester peekSelector out.
	^Promise when: tester stepAsync fulfilled:
		[:result |
		 result isError ifTrue: ['error' out. result exception out].
		 result isFailure ifTrue: ['failure' out. result description out].
		 runTests: tester]
)
) : (
)
