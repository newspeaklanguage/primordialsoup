(* The Newspeak compilation module for PrimordialSoup. For a detailed overview of compilation, see Compiler.

Relation to parsing:

Note that this module does not include a parser or AST classes.  These have utility independent of compilation, and so are available as a separate parsing module. This module requires such a parsing module as parameter. It uses this parameter to create a parser for compilation, and to subclass certain AST classes and tools for its own purposes.

The parser is instantiated upon module creation and stored in a module slot. We expect a Newspeak parser to be purely functional; hence we may share it among all compiler instances. It's not clear if this is a valid assumption in the long term.

Separating the parsing module makes it easy to change parsing strategies (though one could also define parsing here and override it in a subclass).

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2010 Gilad Bracha, Felix Geller and Ryan Macnak
Copyright 2011 Matthias Kleine, Ryan Macnak and Cadence Design Systems
Copyright 2012-2013 Gilad Bracha, Ryan Macnak and Cadence Design Systems

   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
class Newspeak2PrimordialSoupCompilation usingPlatform: platform
 asts: asts
 parsing: parsing
 intermediates: i = NewspeakCompilation
 usingPlatform: platform
 asts: asts (
|
	private StringBuilder = platform kernel StringBuilder.
	private Map = platform collections Map.
	private List = platform collections List.
	private Set = platform collections Set.

	private ASTTool = asts ASTTool.

	private AST = asts AST.
	private BlockAST = asts BlockAST.
	private CascadedSendAST = asts CascadedSendAST.
	private CodeBodyAST = asts CodeBodyAST.
	private MessageAST = asts MessageAST.
	private MessagePatternAST = asts MessagePatternAST.
	private MethodAST = asts MethodAST.
	private MutableSlotDefAST = asts MutableSlotDefAST.
	private UnresolvedSendAST = asts UnresolvedSendAST.
	private NumberAST = asts NumberAST.
	private ReturnStatAST = asts ReturnStatAST.
	private SendAST = asts SendAST.
	private SetterSendAST = asts SetterSendAST.
	private StringAST = asts StringAST.
	private SymbolAST = asts SymbolAST.
	private TupleAST = asts TupleAST.
	private VarDeclAST = asts VarDeclAST.
	private VariableAST = asts VariableAST.

	private Parser = parsing Parser.

	private IntermediateClassDeclaration = i IntermediateClassDeclaration.
	private IntermediateSlotDeclaration = i IntermediateSlotDeclaration.
	private IntermediateMethod = i IntermediateMethod.
	private IntermediateMixin = i IntermediateMixin.
	private IntermediateTransientSlotDeclaration = i IntermediateTransientSlotDeclaration.
|) (
(* The compiler has three main entry points: compileClassSource:Within:, compileClassHeader: within: and compileMethodSource:within:. These compile an entire class declaration, a class header, and a method, respectively.

The compiler returns low level (e.g., VM level) objects representing the results of compilation.
These results are described in some detail in the individual methods. The results are never installed by the compiler. The compiler does not know or care whether it is running in the service of a live system. If the compiler is invoked from such a system, the caller may choose to install the results. This should be done as an atomic modification, since the results may be interdependent (e.g., a nested class and its enclosing class).

Compilation begins with parsing to produce an AST. As that tree is walked, each class side creates a scope with its immediate members, before compiling those members within the scope.

When compiling an individual method, we also rewrite its AST into a lower level AST, and submit that to the AST2ByteCodeCompiler, which produces byte code.  If we are compiling a class declaration or a class header, we compute the overall structure of the resulting mixin, including any required synthetic members.

The NS3 implementation involves a considerable amount of synthetic code, dealing with accessors, nested classes, slot initialization, superclass initialization and the primary constructor.

Nested classes are distinct for every instance of an outer class. Hence, every outer class has synthetic fields that hold the class objects for its nested classes. These fields are always accessed by a getter method which lazily initializes the field. The name of the getter method is the simple name of the inner class. The field, in contrast, is named X`slot, where X is the fully qualified name of the inner class' mixin. This is necessary to prevent it from clashing with nested classes with the same simple name elsewhere in the hierarchy. See createNestedClassAccessorFrom:.

The creation of classes is based on producing an IntermediateClassDeclaration for the class.

Nested classes also have an enclosing object slot pointing at the object that created them. See Behavior>>enclosingObjectSlot.

The primary constructor induces a synthetic class method of the same name, which calls a synthetic instance method prefixed with initializer` me on a freshly created instance. Within that instance method is the code for all the slot initializers, as well as the superclass constructor call. See astForPrimaryFactory: and astForClassDeclarationInitializer:. *)
public class Compiler = super Compiler (
|
currentSource <String>
currentScope <Scope>
currentDepth <Integer> (* The nesting level of the current class; top level classes are at level 0. *)

literalTable <Map[Object, Integer]>
rewriter = Rewriter new.
methodCompiler = AST2ByteCodeCompiler new.

specialSelectors =
	{#+. #-. #*. #//. #\\. #<<. #>>. #&. #|. #<. #>. #<=. #>=. #=. #new. #new:. #at:. #at:put:. #size. #value. #value:. #value:value:. #name. #name:. #add:. #hash. #yourself. #,. #and:. #or:. #not. #basicNew.}.
|) (
(* The compiler is a visitor on an AST that has been processed by the rewriter.
It is a subtype of  ASTTool[Self] - that is, its methods do not return individual results, but instead
side effect state within the compiler.

The compiler decides what instructions to generate at a somewhat abstract level, and asks
a code generator object to actually produce the instruction stream.

The code generator deals with issues like whether to use regular or wide instructions,
what the actual instruction codes are, what the actual offsets for branches are etc.,
so the compiler can abstract from these details. One can almost think of this as producing
assembly.

Closure code appears inline (regardless of whether execution is inlined!). Code in a non-inlined closure starts executing with an empty operand stack, but the depth of the method must be sufficient for the block.

To complicate matters further, the actual size of the activation is simply the sum of the number of parameters, number of locals and maximal operand stack size.

We must ensure sufficient space for any given closure defined in the method. The space required for a closure is the sum of its arity, the number of values copied into it, and its maximal operand stack size. Because the closure must explicitly initialize its locals to nil on startup, its operand stack will include sufficient space for its temporaries.

Ideally, we'd track the operand stack depth for the method and for each closure within it separately. Though it seems that the actual required depth would be the maximum of all these, that is simplistic.

We really need to compute the required context size which is the maximum of:

#method formals + #method locals + method operand stack size

#closure formals + #closure copy downs + closure operand stack size

assuming that the locals of the closure are accounted for in the stack size.

Then, the actual operand stack size we specify for the method is

context size - #method formals - #method locals

We don't do this yet.  What we do instead is often suboptimal, but sometimes insufficient. We compute the cumulative maximum operand stack size for all code in the method, including closures. The idea was that this would be conservative and simple, but in fact it may fail if a closure has a large number of arguments and copy-downs, and the actual operand stack usage is small. *)
class AST2ByteCodeCompiler = ASTTool (
|
	cgen <CodeGenerator>
	debugInfo <DebugInfo>

	valueExpected <Boolean>

	maxClosureContextSize <Integer>
|) (
class CodeGenerator = (|
public code = IntermediateMethod new.

public maxStackDepth ::= 0.
public currentStackDepth ::= 0.
public currentArgs
|) (
public accessModifier: am <Symbol> = (
	code accessModifier: am.
)
public argCount: n <Integer> = (
	code argCount: n.
	currentArgs: n.
)
public bci ^<Integer> = (
	(* Answers the current bytecode index. Used for calculating jump lengths. Note this is NOT the pc. *)
	^code bci
)
public close ^<LowLevelMethodMirror> = (
	(* To be called at the end of code generation. *)
	| methodContextSize = maxStackDepth + code argCount + code maxLocals. |
	code maxStack: (methodContextSize max: maxClosureContextSize).
	^code
)
public decrementStackDepthBy: n = (
	(* Reduce the current height of the operand stack *)
	currentStackDepth:: currentStackDepth - n.
	assert: currentStackDepth >= 0
		message: 'Stack depth must not be negative'.
)
public incrementStackDepthBy: n = (
	(* Increase the current height of the operand stack. Keep track of the maximum operand stack height seen in this method (that's the whole point of tracking the stack height - we need this to create a CompiledMethod. *)
	currentStackDepth:: currentStackDepth + n.
	maxStackDepth:: maxStackDepth max: currentStackDepth.
)
public literals: ls = (
	code literals: ls.
)
public maxLocals ^<Integer> = (
	^code maxLocals
)
public maxLocals: n <Integer> = (
	code maxLocals: n
)
public methodName: n <Symbol> = (
	code selector: n
)
) : (
)
class CodeGeneratorV5 = CodeGenerator (
) (
public createClosureOfArity: numArgs copying: numCopied length: jumpSize = (
	check: jumpSize between: 0 and: 65535.
	check: numCopied between: 0 and: 15.
	check: numArgs between: 0 and: 15.

	decrementStackDepthBy: numCopied.
	incrementStackDepthBy: 1.

	code
		byte: 255;
		byte: (numCopied << 4) | numArgs;
		byte: jumpSize & 255;
		byte: jumpSize >> 8
)
public createEmptyArray: size = (
	incrementStackDepthBy: 1.
	code byte: 222; byte: size.
)
public createFullArray: size = (
	decrementStackDepthBy: size.
	incrementStackDepthBy: 1.
	code byte: 223; byte: size.
)
public dup = (
	code byte: 159.
	incrementStackDepthBy: 1.
)
public eventualSend: selector numArgs: numArgs = (
	|
	selectorIndex = indexForLiteral: selector.
	|

	decrementStackDepthBy: numArgs + 1 (* the receiver *).
	incrementStackDepthBy: 1.

	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.

	code
		byte: 239;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4).
)
public implicitReceiverSend: selector numArgs: numArgs = (
	|
	selectorIndex = indexForLiteral: selector.
	|
	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.

	decrementStackDepthBy: numArgs.
	incrementStackDepthBy: 1.

	selectorIndex <= 7 ifTrue:
		[numArgs <= 1 ifTrue:
			[code byte: 96 + (numArgs << 3) + selectorIndex.
			 ^self]].

	code
		byte: 253;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4).
)
public indexForLiteral: literal = (
	^literalTable at: literal
)
public jumpBackTo: target <Integer> = (
	| distance ::= bci - target. |

	(distance between: 0 and: 14) ifTrue:
		[code byte: 1 + distance.
		 ^self].

	distance:: distance + 3.
	check: distance between: 0 and: 65535.

	code
		byte: 240;
		byte: distance & 255;
		byte: distance >> 8.
)
public jumpBy: distance <Integer> = (
	check: distance between: 0 and: 65535.

	code
		byte: 241;
		byte: distance & 255;
		byte: distance >> 8.
)
public jumpIf: bool <Boolean> by: distance <Integer> = (
	check: distance between: 0 and: 65535.

	decrementStackDepthBy: 1.

	code
		byte: (bool ifTrue: [242] ifFalse: [243]);
		byte: distance & 255;
		byte: distance >> 8.
)
public ordinarySend: selector numArgs: numArgs = (
	|
	selectorIndex
	|

	decrementStackDepthBy: numArgs + 1 (* the receiver *).
	incrementStackDepthBy: 1.

	(specialSelectors includes: selector) ifTrue:
		[code byte: 175 + (specialSelectors indexOf: selector).
		 ^self].

	selectorIndex:: indexForLiteral: selector.

	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.

	selectorIndex <= 7 ifTrue:
		[numArgs <= 1 ifTrue:
			[code byte: 64 + (numArgs << 3) + selectorIndex.
			 ^self]].

	code
		byte: 250;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4).
)
public outerSend: selector numArgs: numArgs depth: depth = (
	|
	selectorIndex = indexForLiteral: selector.
	|
	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.
	check: depth between: 0 and: 255.

	decrementStackDepthBy: numArgs.
	incrementStackDepthBy: 1.

	code
		byte: 254;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4);
		byte: depth.
)
public patchClosureJumpAt: blockBci <Integer> with: distance <Integer> = (
	check: distance between: 0 and: 65535.
	assert: (code byteAt: blockBci - 4) = 255 message: 'Not really a closure/extb?'.
	code byteAt: blockBci - 2 put: (distance & 255).
	code byteAt: blockBci - 1 put: (distance >> 8).
)
public patchJumpAt: jumpBci <Integer> with: distance <Integer> = (
	check: distance between: 0 and: 65535.

	assert: (code byteAt: jumpBci - 3) = 241 message: 'Not really a jump?'.
	code byteAt: jumpBci - 2 put: (distance & 255).
	code byteAt: jumpBci - 1 put: (distance >> 8).
)
public patchJumpIfAt: jumpBci <Integer> with: distance <Integer> = (
	check: distance between: 0 and: 65535.

	assert: ((code byteAt: jumpBci - 3) between: 242 and: 243) message: 'Not really a branch?'.
	code byteAt: jumpBci - 2 put: (distance & 255).
	code byteAt: jumpBci - 1 put: (distance >> 8).
)
public pop = (
	code byte: 158.
	decrementStackDepthBy: 1.
)
public popIntoLocal: offset = (
	decrementStackDepthBy: 1.
	offset <= 7 ifTrue: [code byte: 128 + offset. ^self].
	code byte: 230; byte: offset.
)
public popIntoRemoteTemporary: index inVector: vectorIndex = (
	check: index between: 0 and: 255.
	check: vectorIndex between: 0 and: 255.

	code byte: 246; byte: index; byte: vectorIndex - currentArgs.
	decrementStackDepthBy: 1.
)
public popIntoTemporary: index = (
	check: index between: 0 and: 63.
	index < currentArgs ifTrue: [halt].
	popIntoLocal: index - currentArgs.
)
public pushEnclosingObject: depth = (
	check: depth between: 0 and: 127.

	depth = 0 ifTrue: [^pushSelf].

	incrementStackDepthBy: 1.
	code byte: 233; byte: depth
)
public pushFalse = (
	code byte: 153.
	incrementStackDepthBy: 1.
)
public pushInteger: n <Integer> = (
	incrementStackDepthBy: 1.
	n = -1 ifTrue: [code byte: 160. ^self].
	n = 0 ifTrue: [code byte: 161. ^self].
	n = 1 ifTrue: [code byte: 162. ^self].
	n = 2 ifTrue: [code byte: 163. ^self].
	code
		byte: 249;
		byte: n & 255;
		byte: n >> 8 & 255.
)
public pushLiteral: value = (
	true = value ifTrue: [^pushTrue].
	false = value ifTrue: [^pushFalse].
	nil = value ifTrue: [^pushNil].
	(value isKindOfInteger and: [value between: -32768 and: 32767])
		ifTrue: [^pushInteger: value].
	^pushLiteralWithIndex: (indexForLiteral: value).
)
public pushLiteralWithIndex: index = (
	check: index between: 0 and: 65535.

	incrementStackDepthBy: 1.

	index < 8 ifTrue:
		[code byte: 144 + index.
		 ^self].

	code
		byte: 248;
		byte: index & 255;
		byte: index >> 8.
)
public pushLocal: offset = (
	incrementStackDepthBy: 1.
	offset <= 7 ifTrue: [code byte: 120 + offset. ^self].
	code byte: 229; byte: offset.
)
public pushMixin = (
	code byte: 156.
	incrementStackDepthBy: 1.
)
public pushNil = (
	code byte: 152.
	incrementStackDepthBy: 1.
)
public pushParameter: offset = (
	incrementStackDepthBy: 1.
	offset <= 7 ifTrue: [code byte: 112 + offset. ^self].
	code byte: 228; byte: offset.
)
public pushRemoteTemporary: index inVector: vectorIndex = (
	check: index between: 0 and: 255.
	check: vectorIndex between: 0 and: 255.

	code byte: 245; byte: index; byte: vectorIndex - currentArgs.
	incrementStackDepthBy: 1.
)
public pushSelf = (
	code byte: 155.
	incrementStackDepthBy: 1.
)
public pushTemporary: index = (
	check: index between: 0 and: 63.
	index < currentArgs
		ifTrue: [pushParameter: currentArgs - index]
		ifFalse: [pushLocal: index - currentArgs].
)
public pushTrue = (
	code byte: 154.
	incrementStackDepthBy: 1.
)
public returnLocal: value = (
	nil = value ifTrue: [code byte: 166. ^self].
	false = value ifTrue: [code byte: 167. ^self].
	true = value ifTrue: [code byte: 168. ^self].
	fail.
)
public returnLocalSelf = (
	code byte: 169.
)
public returnLocalTop = (
	code byte: 170.
	decrementStackDepthBy: 1.
)
public returnNonLocal: value = (
	nil = value ifTrue: [code byte: 171. ^self].
	false = value ifTrue: [code byte: 172. ^self].
	true = value ifTrue: [code byte: 173. ^self].
	fail.
)
public returnNonLocalSelf = (
	code byte: 174.
)
public returnNonLocalTop = (
	code byte: 175.
	decrementStackDepthBy: 1.
)
public selfSend: selector numArgs: numArgs = (
	|
	selectorIndex = indexForLiteral: selector.
	|
	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.

	decrementStackDepthBy: numArgs.
	incrementStackDepthBy: 1.

	selectorIndex <= 7 ifTrue:
		[numArgs <= 1 ifTrue:
			[code byte: 80 + (numArgs << 3) + selectorIndex.
			 ^self]].

	code
		byte: 251;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4).
)
public storeIntoLocal: offset = (
	offset <= 7 ifTrue: [code byte: 136 + offset. ^self].
	code byte: 231; byte: offset.
)
public storeIntoRemoteTemporary: index inVector: vectorIndex = (
	check: index between: 0 and: 255.
	check: vectorIndex between: 0 and: 255.

	code byte: 247; byte: index; byte: vectorIndex - currentArgs.
)
public storeIntoTemporary: index = (
	check: index between: 0 and: 63.
	index < currentArgs ifTrue: [halt].
	storeIntoLocal: index - currentArgs.
)
public superSend: selector numArgs: numArgs = (
	|
	selectorIndex = indexForLiteral: selector.
	|
	check: selectorIndex between: 0 and: 4095.
	check: numArgs between: 0 and: 31.

	decrementStackDepthBy: numArgs.
	incrementStackDepthBy: 1.

	code
		byte: 252;
		byte: selectorIndex & 255;
		byte: (selectorIndex >> 8) | (numArgs << 4).
)
) : (
)
(* Debugger information. *)
class DebugInfo = (
|
	public bciSourceMapping <MutableMap[Integer, Interval]> = Map new.
	public localVariables <MutableList[LocalVariableDebugInfo]> = List new.
	public source <String>
|) (
public addInfoForLocal: var <AllocatedLocal> = (
	| info |
	info: LocalVariableDebugInfo new.
	info name: var original name.
	info zeroOriginOffset: var offset.
	info remoteVector: nil.
	info contextDepth: var closureDepth.
	^localVariables addLast: info.
)
public addInfoForRemote: varInfo <AllocatedLocal> in: remoteVarInfo <SemanticVarDecl> = (
	| info |
	info: LocalVariableDebugInfo new.
	info name: varInfo original name.
	info zeroOriginOffset: varInfo original remoteOffset.
	info remoteVector: remoteVarInfo original name.
	info contextDepth: varInfo closureDepth.
	^localVariables addLast: info.
)
public isKindOfDebugInfo ^<Boolean> = (
	^true
)
public mapBCI: bci <Integer> to: src <interval> = (
	bciSourceMapping at: bci put: src
)
public mapperForContext: ctxt = (
	^DebugMapper forContext: ctxt usingDebugInfo: self.
)
) : (
)
class DebugMapper forContext: ctxt usingDebugInfo: dbgInfo = (|
	context <MethodContext> = ctxt.
	debugInfo <DebugInfo> = dbgInfo.
	myDepth <Integer> = self depthOfContext: ctxt.
|) (
astForContextAtDepth: targetDepth <Integer> ^<AST> = (
	|
	returnContext
	|
	myDepth >= targetDepth ifFalse: [deny].

	returnContext:: UnresolvedSendAST new
		receiver: hereNode;
		message: (MessageAST new
			selector: namer doitContextArgumentName;
			arguments: {}).

	(myDepth - targetDepth) timesRepeat: [
		returnContext:: (UnresolvedSendAST new
			receiver: returnContext;
			message: (MessageAST new
				selector: #outerContext;
				arguments: {}))].

	^returnContext
)
bci = (
	^context bci
)
contextAtDepth: targetDepth <Integer> ^<MethodContext> = (
	|
	returnContext
	|
	myDepth >= targetDepth ifFalse: [deny].

	returnContext: context.
	(myDepth - targetDepth)
		timesRepeat: [returnContext: returnContext outerContext].
	^returnContext
)
depthOfContext: ctxt <MethodContext> ^<Integer> = (
	^ctxt closure isNil
		ifTrue: [0 (* method *)]
		ifFalse: [1 + (depthOfContext: ctxt outerContext)]
)
public getValueOf: varName <Symbol> ^<Object> = (
	| info ctxt vector |
	info:: mostLocalInfoFor: varName.
	(* defensive programming, but should be unnecessary now that
	 DebugMapper>localNames filters out variables in deeper contexts. *)
	myDepth >= info contextDepth ifFalse:
		[^nil].
	info remoteVector isNil ifTrue:
		[ctxt:: contextAtDepth: info contextDepth.
		 ctxt size = 0 ifTrue: [^nil].
		 ^ctxt tempAt: info zeroOriginOffset + 1].
	vector:: (getValueOf: info remoteVector).
	vector isNil ifFalse:
		[^vector at: info zeroOriginOffset + 1].
	^nil
)
public getterAstFor: varName <Symbol> ^<SendAST> = (
	| info |
	info:: mostLocalInfoFor: varName.

	^info remoteVector isNil
		ifTrue: [UnresolvedSendAST new
			receiver: (astForContextAtDepth: info contextDepth);
			message: (MessageAST new
				selector: #tempAt:;
				arguments: {NumberAST new value: info zeroOriginOffset + 1})]
		ifFalse: [UnresolvedSendAST new
			receiver: (leastLocalGetterAstFor: info remoteVector);
			message: (MessageAST new
				selector: #at:;
				arguments: {NumberAST new value: info zeroOriginOffset + 1})]
)
leastLocalGetterAstFor: varName <Symbol> ^<SendAST> = (
	| info |
	info:: leastLocalInfoFor: varName.
	assert: (info remoteVector isNil).
	^UnresolvedSendAST new
		receiver: (astForContextAtDepth: info contextDepth);
		message: (MessageAST new
				selector: #tempAt:;
				arguments: {NumberAST new value: info zeroOriginOffset + 1})
)
leastLocalInfoFor: varName <Symbol> ^<LocalVarDebugInfo> = (
	| bestInfo |
	debugInfo localVariables do: [:info |
		(info name = varName and: [info validBCIRange includes: bci]) ifTrue: [
			(bestInfo isNil or: [info contextDepth < bestInfo contextDepth]) ifTrue: [
				bestInfo:: info]]].
	nil = bestInfo ifTrue: [deny].
	^bestInfo
)
public localNames = (
	| names |
	#BOGUS. (* The pc needs to be adjusted the same way we do for the source range. *)

	names: List new.

	debugInfo localVariables do: [:info |
		((info validBCIRange includes: bci)
		and: [info isSynthetic not
		and: [myDepth >= info contextDepth]]) ifTrue: [
			names include: info name ]].
	^names
)
mostLocalInfoFor: varName <Symbol> ^<LocalVarDebugInfo> = (
	| bestInfo |
	debugInfo localVariables do: [:info |
		(info name = varName and: [info validBCIRange includes: bci]) ifTrue: [
			(bestInfo isNil or: [info contextDepth > bestInfo contextDepth]) ifTrue: [
				bestInfo:: info]]].
	nil = bestInfo ifTrue: [deny].
	^bestInfo
)
public setterAstFor: varName <Symbol> putting: newVal <AST> ^<SendAST> = (
	| info |
	info:: mostLocalInfoFor: varName.

	^info remoteVector isNil
		ifTrue: [UnresolvedSendAST new
			receiver: (astForContextAtDepth: info contextDepth);
			message: (MessageAST new
				selector: #tempAt:put:;
				arguments: {
					NumberAST new value: info zeroOriginOffset + 1.
					newVal})]
		ifFalse: [UnresolvedSendAST new
			receiver: (leastLocalGetterAstFor: info remoteVector);
			message: (MessageAST new
				selector: #at:put:;
				arguments: {NumberAST new value: info zeroOriginOffset + 1.
					newVal})]
)
) : (
)
class Interval from: start_ to: stop_ = (
|
public start = start_.
public stop = stop_.
|
) (
public first ^<E> = (
	^self start
)
public includes: element <E> ^<Boolean> = (
	^start <= element and: [element <= stop]
)
public last ^<E> = (
	^self stop
)
) : (
)
(* Debugger information for a local. *)
class LocalVariableDebugInfo = (
|
	public name <Symbol>
	public validBCIRange <Interval>
	public zeroOriginOffset <Integer> (* in remoteVector if not nil, otherwise in context *)
	public remoteVector <Symbol | nil>
	public contextDepth <Integer> (* 0 = method, 1 = closure, 2 = nested closure, ... *)
|) (
public isSynthetic ^<Boolean> = (
	(* remoteVector or setter temp: debugger will not want to report these *)
	^(name indexOf: "@") > 0
)
) : (
)
addDebugInfo: node <AST> = (
	(* Byte to map is first byte of e.g. send, which is the next, i.e. pc.
	Hence this must be sent immediately before generating the send or store bytecode.
	Can't send after generating the bytecode because there may be multiple bytes and mapping the last byte is wrong. *)
	debugInfo mapBCI: cgen bci to: (Interval from: node start to: node end).
)
addLocalVar: var <AllocatedLocal> = (
	var remote ifFalse:
		[cgen maxLocals: (cgen maxLocals max: var offset + 1)].

	^debugInfo addInfoForLocal: var
)
applyForEffectTo: node <Node> = (
	| original startDepth result |
	original:: valueExpected.
	startDepth:: cgen currentStackDepth.
	valueExpected:: false.
	result:: node apply: self.
	valueExpected:: original.
	cgen currentStackDepth = startDepth ifFalse: [unbalancedStack].
	^result
)
applyForValueTo: node <Node> = (
	| original startDepth result |
	original:: valueExpected.
	startDepth:: cgen currentStackDepth.
	valueExpected:: true.
	result:: node apply: self.
	valueExpected:: original.
	cgen currentStackDepth = (startDepth + 1) ifFalse: [unbalancedStack].
	^result
)
public arrayNode: node <ArrayAST> = (
	nil = node elements
		ifTrue:
			[addDebugInfo: node.
			 cgen createEmptyArray: node size]
		ifFalse:
			[node elements do: [:ea | self applyForValueTo: ea].
			 addDebugInfo: node.
			 cgen createFullArray: node size].

	valueExpected ifFalse: [^cgen pop].
)
public blockLocalReturnNode: node <BlockLocalReturnAST> = (
	valueExpected ifTrue: [returnUsedForValue].
	^self localReturnNode: node.
)
public boolNode: node <BoolAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushLiteral: node value
)
cascadeSend: node <SendAST> = (
	node isKindOfCascadedSendNode
		ifTrue: [cascadeSend: node previousSend]
		ifFalse: [self applyForValueTo: node receiver].

	cgen dup.
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	node message isEventual
		ifTrue: [cgen eventualSend: node message selector numArgs: node message arguments size]
		ifFalse: [cgen ordinarySend: node message selector numArgs: node message arguments size].
	cgen pop.
)
public cascadedSendNode: node <CascadedSendAST> = (
	cascadeSend: node previousSend.
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	node message isEventual
		ifTrue: [cgen eventualSend: node message selector numArgs: node message arguments size]
		ifFalse: [cgen ordinarySend: node message selector numArgs: node message arguments size].
	valueExpected ifFalse: [cgen pop].
)
public characterNode: node <CharacterAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushLiteral: node value
)
cleanup = (
	cgen: nil.
  	debugInfo: nil.

	valueExpected: nil.
	maxClosureContextSize: nil.
)
public closureNode: node <ClosureAST> = (
	| blockPos savedStackDepth savedStackMax savedStackArgs localVariableDebugInfos validBCIRange |

	valueExpected ifFalse: [^self].

	node copiedOuter size = node copiedInner size ifFalse: [error].
	node copiedOuter do:
		[:each | cgen pushTemporary: each offset].

	addDebugInfo: node.
	cgen
		createClosureOfArity: node parameters size
		copying: node copiedOuter size
		length: 0 (* needs patching *).

	blockPos: cgen bci.
	savedStackDepth:: cgen currentStackDepth.
	savedStackMax:: cgen maxStackDepth.
	savedStackArgs:: cgen currentArgs.
	cgen maxStackDepth: 0.
	cgen currentArgs: node parameters size.

	localVariableDebugInfos:: node copiedInner collect: [:var | addLocalVar: var].
	(node pushNilCount) timesRepeat: [cgen pushNil].
	(* These nils establish the temp frame for temps other than params and copied values. They contribute to the operand stack size, obviating the need to directly include the number of local variables in the context size *)
	self applyForEffectTo: node body.

	validBCIRange:: Interval from: blockPos to: cgen bci - 1.
	localVariableDebugInfos do: [:each | each validBCIRange: validBCIRange].

	maxClosureContextSize::
		maxClosureContextSize max: (node parameters size + node copiedOuter size + cgen maxStackDepth).
	cgen currentStackDepth: savedStackDepth.
	cgen maxStackDepth: savedStackMax.
	cgen currentArgs: savedStackArgs.

	cgen patchClosureJumpAt: blockPos with: cgen bci - blockPos. (* patch jump over block body *)
)
public codeBodyNode: node <CodeBodyAST> = (
	(* This could be a method body, a closure body, part of an inlined block, or a setter send.  Each method body and closure body needs to have separate indexing for temps because their activations will be separate MethodContexts.  Inlined blocks and setter sends should continue to use the same indexing as their enclosing method or closure.  To accomplish this, we use a stack of counters. *)

	|
	statements
	localVariableDebugInfos
	startBCI
	validBCIRange
	|

	localVariableDebugInfos:: List new.
	startBCI:: cgen bci.

	localVariableDebugInfos addAll:
		(node parameters collect: [:param | addLocalVar: param]).

	(* Copied values are included at the beginning of temporaries thanks to the Rewriter. *)
	node temporaries do:
		[:temp |
		temp remote
			ifFalse: [localVariableDebugInfos add: (addLocalVar: temp)]
			ifTrue:
				[localVariableDebugInfos add:
					(debugInfo addInfoForRemote: temp in: temp remoteVector)]].

	statements:: node statements.
	1 to: statements size do:
		[:index | | statement = node statements at: index. |
		index = statements size
			ifTrue: [statement apply: self]
			ifFalse: [self applyForEffectTo: statement]].

	validBCIRange:: Interval from: startBCI to: cgen bci - 1.
	localVariableDebugInfos do: [:each | each validBCIRange: validBCIRange].

	^localVariableDebugInfos
)
public conditionalNode: node <IfAST> = (
	| ifPos <Integer> endThen <Integer> depth <Integer> |

	(* cond. branch(L1). then. jump(L2). L1: else. L2: *)
	(* cond. branch(L1). then. L1: *)

	self applyForValueTo: node condition.
	addDebugInfo: node.
	cgen jumpIf: node ifTrue not by: 0. (* jump to else (but needs patching) *)
	ifPos: cgen bci. (* remember patch address *)

	depth: cgen currentStackDepth.
	node then apply: self.

	nil = node else
		ifTrue:
			[valueExpected ifTrue: [cgen pushNil].
			 endThen: cgen bci]
		ifFalse:
			[cgen currentStackDepth: depth.
			 addDebugInfo: node.
			 cgen jumpBy: 0. (* jump to end (but needs patching) *)
			 endThen:: cgen bci. (* remember patch address *)
			 node else apply: self.
			 cgen patchJumpAt: endThen with: cgen bci - endThen].

	cgen patchJumpIfAt: ifPos with: endThen - ifPos.
)
public enclosingObjectNode: node <EnclosingObjectAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushEnclosingObject: node depth.
)
public eventualSendNode: node <EventualSendAST> = (
	self applyForValueTo: node receiver.
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen eventualSend: node message selector numArgs: node message arguments size.
	valueExpected ifFalse: [cgen pop].
)
public implicitReceiverSendNode: node <ImplicitReceiverSendAST> = (
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen implicitReceiverSend: node message selector numArgs: node message arguments size.
	valueExpected ifFalse: [cgen pop].
)
literalArray ^<Array[Character | Number | String | Symbol]> = (
	| literals <Array[Character | Number | String | Symbol]> |
	literals:: Array new: literalTable size.
	literalTable keysAndValuesDo: [:k :v | literals at: v + 1 put: k].
	^literals
)
public localReadNode: node <LocalReadAST> = (
	| var <AllocatedLocal> = node variable. |
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	var remote
		ifFalse: [cgen pushTemporary: var offset]
		ifTrue:
			[cgen
				pushRemoteTemporary: var original remoteOffset
				inVector: var remoteVector offset].
)
localReturnNode: node <MethodLocalReturnAST | BlockLocalReturnAST> = (
	(node expression isKindOfReceiverNode) ifTrue:
		[nil = node start ifFalse: [addDebugInfo: node].
		^cgen returnLocalSelf].
	(node expression isKindOfNilNode) ifTrue:
		[nil = node start ifFalse: [addDebugInfo: node].
		^cgen returnLocal: nil].
	(node expression isKindOfLiteralNode) ifTrue:
		[node expression value isKindOfBoolean ifTrue:
			[nil = node start ifFalse: [addDebugInfo: node].
			 ^cgen returnLocal: node expression value]].

	self applyForValueTo: node expression.
	addDebugInfo: node.
	cgen returnLocalTop.

	(* Simplify depth tracking for branches like x:: y ifTrue: [z] ifFalse: [^w] *)
	valueExpected ifTrue: [cgen incrementStackDepthBy: 1].
)
public localWriteNode: node <LocalWriteAST> = (
	self applyForValueTo: node value.
	addDebugInfo: node.
	valueExpected
		ifTrue: [storeInto: node variable]
		ifFalse: [popAndStoreInto: node variable].
)
public loopNode: node <LoopAST> = (
	(* prologue. L1: cond. branch(L2). body. jump(L1). L2: *)

	|
	topOfLoop <Integer>
	whilePos <Integer>
	localVariableDebugInfos = List new.
	|

	nil = node prologue ifFalse:
		[localVariableDebugInfos addAll: (self applyForEffectTo: node prologue)].

	topOfLoop:: cgen bci.

	localVariableDebugInfos addAll: (self applyForValueTo: node condition).

	addDebugInfo: node.
	cgen jumpIf: node isWhileTrue not by: 0.
	whilePos:: cgen bci. (* remember patch address *)

	nil = node body ifFalse:
		[self applyForEffectTo: node body].

	addDebugInfo: node.
	cgen jumpBackTo: topOfLoop.

	cgen patchJumpIfAt: whilePos with: cgen bci - whilePos.
 	(* patch the jump after the test so it comes to end of the then block *)

	valueExpected ifTrue: [cgen pushNil]. (* Result of loop message. Technically wrong, but Squeak makes the same mistake, and loops are almost never evaluated for value. *)

	localVariableDebugInfos do: [:each | each validBCIRange: (Interval from: each validBCIRange first to: cgen bci - 1)].
)
public methodLocalReturnNode: node <MethodLocalReturnAST> = (
	^self localReturnNode: node
)
public methodNode: node <MethodAST> = (
	(* Create a compiled method, whose body is the result of compiling the node's body. *)
	| result <IntermediateMethod> |
	setup.

	cgen
		maxLocals: 0;
		accessModifier: node accessModifier;
		methodName: node pattern selector;
		argCount: node pattern parameters size;
		literals: literalArray.

	self applyForEffectTo: node body.
	cgen code debugInfo: debugInfo. (* set debug info *)
	processPragmasOf: node.

	result:: cgen close.
	cleanup.
	^result
)
public mixinNode: node = (
	valueExpected ifFalse: [^self].
	cgen pushMixin.
)
public nilNode: node = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushNil.
)
public nonLocalReturnNode: node <NonlocalReturnAST> = (
	(node expression isKindOfReceiverNode) ifTrue:
		[nil = node start ifFalse: [addDebugInfo: node].
		^cgen returnNonLocalSelf].
	(node expression isKindOfNilNode) ifTrue:
		[nil = node start ifFalse: [addDebugInfo: node].
		^cgen returnNonLocal: nil].
	(node expression isKindOfLiteralNode) ifTrue:
		[node expression value isKindOfBoolean ifTrue:
			[nil = node start ifFalse: [addDebugInfo: node].
			 ^cgen returnNonLocal: node expression value]].

	self applyForValueTo: node expression.
	addDebugInfo: node.
	cgen returnNonLocalTop.

	(* Simplify depth tracking for branches like x:: y ifTrue: [z] ifFalse: [^w] *)
	valueExpected ifTrue: [cgen incrementStackDepthBy: 1].
)
public numberNode: node <NumberAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushLiteral: node value.
)
public ordinarySendNode: node <OrdinarySendAST> = (
	self applyForValueTo: node receiver.
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen ordinarySend: node message selector numArgs: node message arguments size.
	valueExpected ifFalse: [cgen pop].
)
public outerSendNode: node <OuterSendAST> = (
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen outerSend: node message selector numArgs: node message arguments size depth: node depth.
	valueExpected ifFalse: [cgen pop].
)
popAndStoreInto: var <AllocatedLocal> = (
	var remote
		ifFalse: [cgen popIntoTemporary: var offset]
		ifTrue:
			[cgen
				popIntoRemoteTemporary: var original remoteOffset
				inVector: var remoteVector offset]
)
processPragmasOf: node <MethodAST> = (
	| pragmas |
	pragmas:: node body pragmas.
	nil = pragmas ifFalse:
		[pragmas do: [:messageAST |
			(messageAST selector = #primitive:) ifTrue:
				[cgen code primitive: messageAST arguments first value]]].
)
public receiverNode: node = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushSelf.
)
public selfSendNode: node <SendAST> = (
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen selfSend: node message selector numArgs: node message arguments size.
	valueExpected ifFalse: [cgen pop].
)
setup = (
	cgen:: CodeGeneratorV5 new.
  	debugInfo: DebugInfo new.

	valueExpected: nil.
	maxClosureContextSize: 0.
)
storeInto: var <AllocatedLocal> = (
	var remote
		ifFalse: [cgen storeIntoTemporary: var offset]
		ifTrue:
			[cgen
				storeIntoRemoteTemporary: var original remoteOffset
				inVector: var remoteVector offset]
)
public stringNode: node <StringAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushLiteral: node value.
)
public superSendNode: node <SuperSendNode> = (
	node message arguments do: [:argument | self applyForValueTo: argument].
	addDebugInfo: node message.
	cgen superSend: node message selector numArgs: node message arguments size.
	valueExpected ifFalse: [cgen pop].
)
public symbolNode: node <SymbolAST> = (
	valueExpected ifFalse: [^self].
	addDebugInfo: node.
	cgen pushLiteral: node value.
)
) : (
)
class ASTTraverser = ASTTool () (
public blockLocalReturnNode: node <BlockLocalReturnAST> = (
	node expression apply: self.
)
public blockNode: node <BlockAST> = (
	node body apply: self.
)
public boolNode: node <BooleanAST> = (
	(* Leaf *)
)
public cascadedSendNode: node <CascadedSendAST> = (
	node previousSend apply: self.
	node message apply: self.
)
public characterNode: node <CharacterAST> = (
	(* Leaf *)
)
public conditionalNode: node <ConditionalAST> = (
	node condition apply: self.

	node then apply: self.
	nil = node else ifFalse:
		[node else apply: self].
)
public enclosingObjectNode: node <EnclosingObjectAST> = (
	(* Leaf *)
)
public eventualSendNode: node <EventualSendAST> = (
	node receiver apply: self.
	node message apply: self.
)
public implicitReceiverSendNode: node <ImplicitReceiverSendAST> = (
	node message apply: self.
)
public loopNode: node <LoopAST> = (
	nil = node prologue ifFalse:
		[node prologue apply: self].
	node condition apply: self.
	nil = node body ifFalse:
		[node body apply: self].
)
public messageNode: node <MessageAST> = (
	node arguments do: [:each | each apply: self].
)
public messagePatternNode: node <MessagePatternAST> = (
	(* Leaf *)
)
public methodLocalReturnNode: node <MethodLocalReturnAST> = (
	node expression apply: self.
)
public methodNode: node <MethodAST> = (
	node pattern apply: self.
	node body apply: self.
)
public mixinNode: node <MixinClassNode> = (
	(* Leaf *)
)
public nilNode: node <NilAST> = (
	(* Leaf *)
)
public nonLocalReturnNode: node <NonlocalReturnAST> = (
	node expression apply: self.
)
public numberNode: node <NumberAST> = (
	(* Leaf *)
)
public ordinarySendNode: node <OrdinarySendAST> = (
	node receiver apply: self.
	node message apply: self.
)
public outerSendNode: node <OuterSendAST> = (
	node message apply: self.
)
public receiverNode: node <ReceiverAST> = (
	(* Leaf *)
)
public selfSendNode: node <SelfSendAST> = (
	node message apply: self.
)
public stringNode: node <StringAST> = (
	(* Leaf *)
)
public superSendNode: node <SuperSendAST> = (
	node message apply: self.
)
public symbolNode: node <SymbolAST> = (
	(* Leaf *)
)
public tupleNode: node <TupleAST> = (
	node elements do: [:element | element apply: self]
)
) : (
)
class AllocatedLocal = (
|
	public remote <Boolean>
	public offset <Integer>
	public remoteVector <AllocatedLocal>
	public closureDepth <Integer>
	public original <LocalEntry>
|
) (
) : (
)
(* To use pushFullArray/pushEmptyArray *)
class ArrayAST = AST (
|
	public elements <List[AST] | nil>
	public size <Integer>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool arrayNode: self.
)
) : (
)
(* Phase 1 of closure rewrite.

Determines which local variables need to be made indirect/remote:
 - a variable written by a closure nested in its defining scope, OR
 - a variable written in its defining scope after being read in a nested closure
(- and is not an inlined induction variable; must behave as if each iteration has its own copy)

Determines which local variables are copied into each closure:
 - non-indirect free variables
 - the indirection vector of indirect free variables

Adds literals and selectors to the literal table.
Adds indirection vectors to code bodies. *)
class ClosureRewriter1 = ASTTraverser (
|
	closureDepth
	captured ::= List new.

	capturedMap = Map new.
|
) (
addLiteral: value <Character | Number | String | Symbol> = (
	literalTable at: value ifAbsentPut: [literalTable size].
)
addRemoteVectorForCodeBodyNode: node <CodeBodyAST> = (
	|
	indirectionCount
	indirectionVectorAST
	indirectionVectorEntry
	rewrittenParameters
	rewrittenTemporaries
	rewrittenStatements
	remoteOffset
	|

	indirectionCount:: 0.
	node parameters do:
		[:parameter | parameter remote ifTrue: [error]].
	node temporaries do:
		[:temporary | temporary remote ifTrue: [indirectionCount:: indirectionCount + 1]].

	0 = indirectionCount ifFalse:
		[indirectionVectorAST:: rewriter TemporaryAST
			name: #'@indirectionVector'
			type: nil.
		 indirectionVectorEntry:: LocalEntry
			forDeclaration: indirectionVectorAST
			atDepth: nil.
		 indirectionVectorEntry closureDepth: closureDepth.
		 indirectionVectorEntry remote: false.
		 node temporaries addFirst: indirectionVectorEntry.
		 node statements addFirst: (rewriter LocalWriteAST
			to: indirectionVectorEntry
			assign: (ArrayAST new size: indirectionCount))].

	remoteOffset:: 0.
	node temporaries do:
		[:temporary |
		 temporary remote ifTrue:
			[temporary remoteVector2: indirectionVectorEntry.
			 temporary remoteOffset: remoteOffset.
			 remoteOffset:: remoteOffset + 1]].
)
public blockNode: node <BlockAST> = (
	| parentCaptured |
	closureDepth:: closureDepth + 1.
	parentCaptured:: captured.
	captured:: List new.

	node body apply: self.
	capturedMap at: node put: captured.

	closureDepth:: closureDepth - 1.
	captured do: [:each | each closureDepth < closureDepth ifTrue: [parentCaptured add: each]].
	captured:: parentCaptured.
)
public cascadedSendNode: node <CascadedSendAST> = (
	| selector = node message selector. |
	(specialSelectors includes: selector)
		ifFalse: [addLiteral: selector].
	^super cascadedSendNode: node
)
public characterNode: node <CharacterAST> = (
	addLiteral: node value.
	^node
)
public codeBodyNode: node <CodeBodyAST> = (
	node parameters do:
		[:parameter |
		 parameter closureDepth: closureDepth.
		 parameter remote: false].
	node temporaries do:
		[:temporary |
		 temporary closureDepth: closureDepth.
		 temporary remote: false].

	node statements do: [:statement | statement apply: self].

	addRemoteVectorForCodeBodyNode: node.
)
public eventualSendNode: node <EventualSendAST> = (
	addLiteral: node message selector.
	^super eventualSendNode: node
)
public implicitReceiverSendNode: node <ImplicitReceiverSendAST> = (
	addLiteral: node message selector.
	^super implicitReceiverSendNode: node
)
public localReadNode: node <LocalReadAST> = (
	| var = node variable. |
	closureDepth > var closureDepth ifTrue:
		[var captured: true.
		 captured add: var].
)
public localWriteNode: node <WriteReadAST> = (
	| var = node variable. |
	node value apply: self.

	(* Nested write or write after nested read *)
	closureDepth > var closureDepth
		ifTrue:
			[var captured: true; remote: true.
			 var induction ifTrue: [error].
			 captured add: var]
		ifFalse:
			[var captured ifTrue: [var induction ifFalse: [var remote: true]]].
)
public loopNode: node <LoopAST> = (
	super loopNode: node.

	(* Work around bad scoping of induction variables. *)
	nil = node prologue ifFalse:
		[addRemoteVectorForCodeBodyNode: node prologue].
)
public methodNode: node <MethodAST> = (
	| pattern body result |
	literalTable:: Map new.
	closureDepth:: 0.

	node body apply: self.

	^capturedMap
)
public numberNode: node <NumberAST> = (
	| value = node value. |
	(value isKindOfInteger and: [value between: -32768 and: 32767])
		ifFalse: [addLiteral: node value].
	^node
)
public ordinarySendNode: node <OrdinarySendAST> = (
	| selector = node message selector. |
	(specialSelectors includes: selector)
		ifFalse: [addLiteral: selector].
	^super ordinarySendNode: node
)
public outerSendNode: node <OuterSendAST> = (
	addLiteral: node message selector.
	^super outerSendNode: node
)
public selfSendNode: node <SelfSendAST> = (
	addLiteral: node message selector.
	^super selfSendNode: node.
)
public stringNode: node <StringAST> = (
	(* Note we treat it as a symbol. *)
	addLiteral: node value asSymbol.
	^node
)
public superSendNode: node <SuperSendAST> = (
	addLiteral: node message selector.
	^super superSendNode: node
)
public symbolNode: node <SymbolAST> = (
	addLiteral: node value.
	^node
)
) : (
)
(* Phase 2 of closure rewrite.

Adds copied versions of captured variables.
Assigns locals to context/activation slots. *)
class ClosureRewriter2 with: cm = (
|
	capturedSets <Map[BlockAST, List[LocalEntry]]> = cm.

	closureDepth ::= 0.
	remapping ::= Map new.

	nextOffset ::= 0.
|
) (
allocateLocal: var <LocalEntry> = (
	^remapping at: var ifAbsentPut:
		[ | allocated = AllocatedLocal new. |
		 allocated closureDepth: closureDepth.
		 allocated remote: var remote.
		 var remote
			ifTrue:
				[allocated remoteVector: (remapping at: var remoteVector2)]
			ifFalse:
				[allocated offset: nextOffset.
				 nextOffset: nextOffset + 1].
		 allocated original: var.
		 allocated].
)
public arrayNode: node <ArrayAST> = (
	(* Only remote vector initialization (empty array) should appear here. *)
	node elements = nil ifFalse: [error].

	^ArrayAST new
		size: node size
)
public blockLocalReturnNode: node <BlockLocalReturnAST> = (
	^(rewriter BlockLocalReturnAST expression: (node expression apply: self))
		copyPositionFrom: node
)
public blockNode: node <BlockAST> = (
	|
	copied = List new.
	copiedOuter = List new.
	copiedInner = List new.
	parentRemapping
	parentNextOffset
	lastImplicitOffset
	rewrittenBody
	result
	|
	closureDepth:: closureDepth + 1.
	parentNextOffset:: nextOffset.
	nextOffset:: 0.
	parentRemapping:: remapping.
	remapping:: Map new.

	(* 1. Parameters *)
	node parameters do: [:parameter | allocateLocal: parameter].

	(* 2. Copy downs *)
	(capturedSets at: node) do:
		[:captured |
		 captured remote
			ifTrue: [copied include: captured remoteVector2]
			ifFalse: [copied include: captured]].
	copied do:
		[:copiedVar |
		 copiedOuter add: (parentRemapping at: copiedVar).
		 copiedInner add: (allocateLocal: copiedVar)].

	lastImplicitOffset:: nextOffset.

	(* 3. Indirected *)
	(capturedSets at: node) do:
		[:captured | captured remote ifTrue: [allocateLocal: captured]].

	rewrittenBody:: node body apply: self.

	result:: CogClosureAST new
		body: rewrittenBody;
		copiedOuter: copiedOuter;
		copiedInner: copiedInner;
		pushNilCount: nextOffset - lastImplicitOffset;
		copyPositionFrom: node.

	remapping:: parentRemapping.
	nextOffset:: parentNextOffset.
	closureDepth:: closureDepth - 1.

	^result
)
public boolNode: node <BooleanAST> = (
	^node
)
public cascadedSendNode: node <CascadedSendAST> = (
	^(CascadedSendAST new
		to: (node previousSend apply: self)
		cascade: (node message apply: self))
		copyPositionFrom: node
)
public characterNode: node <CharacterAST> = (
	^node
)
public codeBodyNode: node <CodeBodyAST> = (
	^CodeBodyAST new
	  parameters: (node parameters collect: [:parameter | allocateLocal: parameter])
	  temporaries: (node temporaries collect: [:temporary | allocateLocal: temporary])
	  statements: (node statements collect: [:statement | statement apply: self]);
		pragmas: node pragmas;
	  copyPositionFrom: node
)
public conditionalNode: node <ConditionalAST> = (
	^(rewriter ConditionalAST
		if: (node condition apply: self)
		is: node ifTrue
		then: (nullableCodeBodyNode: node then)
		else: (nullableCodeBodyNode: node else))
		copyPositionFrom: node
)
public enclosingObjectNode: node <EnclosingObjectAST> = (
	^node
)
public eventualSendNode: node <EventualSendAST> = (
	^EventualSendAST new
		receiver: (node receiver apply: self);
		message: (node message apply: self);
		copyPositionFrom: node
)
public implicitReceiverSendNode: node <ImplicitReceiverSendAST> = (
	^(rewriter ImplicitReceiverSendAST new
		message: (node message apply: self);
		depth: node depth)
		copyPositionFrom: node
)
public localReadNode: node <LocalReadAST> = (
	^(rewriter LocalReadAST
		of: (remapping at: node variable))
		copyPositionFrom: node
)
public localWriteNode: node <LocalWriteAST> = (
	^(rewriter LocalWriteAST
		to: (remapping at: node variable)
		assign: (node value apply: self))
		copyPositionFrom: node
)
public loopNode: node <LoopAST> = (
	^rewriter LoopAST new
		prologue: (nullableCodeBodyNode: node prologue);
		condition: (nullableCodeBodyNode: node condition);
		isWhileTrue: node isWhileTrue;
		body: (nullableCodeBodyNode: node body);
		copyPositionFrom: node
)
public messageNode: node <MessageAST> = (
	^(MessageAST new
		send: node selector
		with: (node arguments collect: [:argument | argument apply: self]))
		copyPositionFrom: node
)
public methodLocalReturnNode: node <MethodLocalReturnAST> = (
	^(rewriter MethodLocalReturnAST expression: (node expression apply: self))
		copyPositionFrom: node
)
public methodNode: node <MethodAST> = (
	| body result |

	body:: node body apply: self.
	^(MethodAST new
		pattern: node pattern
		body: body
		accessModifier: node accessModifier)
		copyPositionFrom: node
)
public mixinNode: node <MixinClassNode> = (
	^node
)
public nilNode: node <NilAST> = (
	^node
)
public nonLocalReturnNode: node <NonlocalReturnAST> = (
	^(rewriter NonlocalReturnAST expression: (node expression apply: self))
		copyPositionFrom: node
)
nullableCodeBodyNode: node = (
	nil = node ifTrue: [^nil].
	^codeBodyNode: node
)
public numberNode: node <NumberAST> = (
	^node
)
public ordinarySendNode: node <OrdinarySendAST> = (
	^(rewriter OrdinarySendAST
		to: (node receiver apply: self)
		send: (node message apply: self))
		copyPositionFrom: node
)
public outerSendNode: node <OuterSendAST> = (
	^(rewriter OuterSendAST new
		message: (node message apply: self);
		depth: node depth)
		copyPositionFrom: node
)
public receiverNode: node <ReceiverAST> = (
	^node
)
public selfSendNode: node <SelfSendAST> = (
	^(rewriter SelfSendAST new
		message: (node message apply: self))
		copyPositionFrom: node
)
public stringNode: node <StringAST> = (
	^node
)
public superSendNode: node <SuperSendAST> = (
	^(rewriter SuperSendAST new
		message: (node message apply: self))
		copyPositionFrom: node
)
public symbolNode: node <SymbolAST> = (
	^node
)
public tupleNode: node <TupleAST> = (
	^ArrayAST new
		elements: (node elements collect: [:element | element apply: self]);
		size: node elements size;
		copyPositionFrom: node
)
) : (
)
class CogClosureAST = BlockAST (|
	public copiedInner <List[LocalEntry]>
	public copiedOuter <List[LocalEntry]>
	public pushNilCount <Integer>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool closureNode: self
)
) : (
)
class EventualSendAST = AST (
|
public receiver <AST>
public message <MessageAST>
|
) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool eventualSendNode: self
)
public isKindOfSendNode ^<Boolean> = (
	^true
)
) : (
)
class MixinAST = AST (
) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool mixinNode: self
)
) : (
)
(* In addition to the common rewrites, this class

 - Rewrites eventual sends as immediate sends to the MessageLoop global.
 - Rewrites large tuples expressions to (Array new: n) at: 1 put: e1;...; yourself to avoid operand stack size limits. *)
class Rewriter = super Rewriter (
) (
largeTupleNode: aNode <TupleAST> = (
	(* (Array new: n) at: 1 put: e1; ...; at: n put: en; yourself *)
	| result <AST> index <Integer> |
	(* Array *)
	result:: (UnresolvedSendAST new
		to: implicitReceiverNode
		send: (MessageAST new
			selector: #Array;
			arguments: {};
			copyPositionFrom: aNode)).

	(* Array new: n *)
	result:: UnresolvedSendAST new
		to: result
		send: (MessageAST new
			selector: #new:;
			arguments: {
				NumberAST new value: aNode elements size};
			copyPositionFrom: aNode).
	result copyPositionFrom: aNode.

	(* (;)at: index put: element *)
	index:: 0.
	aNode elements do:
		[:element <AST> | | message <MessageAST> |
		index:: index + 1.
		message:: MessageAST new
			selector: #at:put:;
			arguments: {
				NumberAST new value: index.
				element}.
		index = 1
			ifTrue: [result:: UnresolvedSendAST new to: result send: message]
			ifFalse: [result:: CascadedSendAST new to: result cascade: message]].

	aNode elements size > 0 ifTrue: [
		(* yourself *)
		result:: CascadedSendAST new
			to: result
			cascade: (MessageAST new
				selector: #yourself;
				arguments: {};
				copyPositionFrom: aNode).
		result copyPositionFrom: aNode].

	^result apply: self
)
public mixinNode: node <MixinClassNode> = (
	^node
)
processEventualSend: node <UnresolvedSendAST> = (
	^EventualSendAST new
		receiver: (node receiver apply: self);
		message: (node message apply: self);
		copyPositionFrom: node
)
processMappedVariable: msg decl: binding = (
	^((msg selector endsWith: ':')
		ifTrue: [binding setterAst: msg arguments first]
		ifFalse: [binding getterAst])
			apply: self
)
public tupleNode: node <TupleAST> = (
	(* We can only use pushConsArray for tuples small enough to fit all elements on the operand stack. The optimial limit is the large frame size minus the current stack depth. We don't track the current depth here, so an arbitrary conservative limit is used. *)
	node elements size > 7 ifTrue: [^self largeTupleNode: node].
	^super tupleNode: node
)
) : (
)
private accessorASTForNestedClassNamed: name <String> classTree: classTree <NormalSendAST> accessModifier: am <Symbol> ^<MethodAST> = (
(* Build an AST for a method that would lazily create a nested class via mixin application, and cache it. The generated code has the form

name = (
	nil = self name`slot ifTrue:
		[self name`slot: (<classTree>)].
	^self name`slot
)

where <classTree> is the AST that computes the class.
*)

	| nilNode nestedClassSlot mixinApplication assignSlot nilCheck block if return |

	nilNode:: UnresolvedSendAST new
		to: hereNode
		send: #nil
		with: {}.
	nestedClassSlot:: UnresolvedSendAST new
		to: selfNode
		send: (namer mixinSlotNameFor: name) asSymbol with: {}.
	nilCheck:: UnresolvedSendAST new
		to: nilNode
		send: #=
		with: {nestedClassSlot}.

	mixinApplication:: classTree.
	assignSlot:: UnresolvedSendAST new
		to: selfNode
		send: ((namer mixinSlotNameFor: name), ':') asSymbol
		with: {mixinApplication}.
	block:: BlockAST new
		body: (CodeBodyAST new
			parameters: {}
			temporaries: {}
			statements: {assignSlot}).
	if:: UnresolvedSendAST new
		to: nilCheck
		send: #ifTrue:
		with: {block}.
	return:: ReturnStatAST new expression: nestedClassSlot.

	^MethodAST new
		pattern: (MessagePatternAST new
			selector: name asSymbol
			parameters: {};
			accessModifier: am);
		body: (CodeBodyAST new
			parameters: {}
			temporaries: {}
			statements: {if. return})
)
private allButFirstOf: oldArray = (
	| newArray = Array new: oldArray size - 1. |
	newArray replaceFrom: 1 to: newArray size with: oldArray startingAt: 2.
	^newArray
)
astForClassDeclarationInitializer: aNode <ClassHeaderAST> ^<MethodAST> = (
	|
	start <integer>
	end <Integer>
	stmts <List[StmtAST]>
	initHdr <MessagePatternAST>
	body <CodeBodyAST>
	slots <Collection[StmtAST]>
	|

	initHdr:: MessagePatternAST new
		accessModifier: aNode constructor accessModifier;
		selector: (initializerSelectorNameFor: aNode constructor selector);
		parameters: aNode constructor parameters;
		copyPositionFrom: aNode constructor.

	(* Call super initializers *)
	stmts:: mixinInitializationCallsFor: aNode inheritanceChain.

	(* run slot initializers *)
	stmts addAll: (computeSlotInitializersFor: aNode).

	(*  run init expressions *)
	stmts addAll: aNode initExprs.

	body:: CodeBodyAST new
		parameters: initHdr parameters
		temporaries: List new
		statements: stmts;
		copyPositionFrom: aNode.
	^MethodAST new
		pattern: initHdr body: body accessModifier: #public;
		copyPositionFrom: aNode
)
astForComputingClassDeclaration: name <String> superCall: superCall <NormalSendAST> iList: iList <List[SendAST]> ^ <NormalSendAST> = (
	(* Compute the tree for an ordinary class declaration whose superclass is a generalized mixin application. *)
	^UnresolvedSendAST new
		to: MixinAST new
		send: #apply:to:withEnclosingObject:
		with: {
			SymbolAST new value: name.
			inheritanceASTWIthSuperclass: superCall receiver iList: iList.
			selfNode}
)
astForPrimaryFactory: hdr <ClassHeaderAST> ^<MethodAST> = (
	(* Manufacture a method with the given class header's primary constructor's signature, and body that creates a new instance of the class and calls its initializer.
		| @newInstance |
		(@newInstance: self basicNew) initializer`factory: arg1 ... with: argN.
		^@newInstance
	*)
	|
	tempDecl
	cons <MessagePatternAST>
	newInstance <ExpressionAST>
	args <List[ExpressionAST]>
	msgFromConstructor <MessageAST>
	stmts <List[AST]>
	body <CodeBodyAST>
	|

	tempDecl:: MutableSlotDefAST new
		slotDecl: (VarDeclAST name: #'@newInstance' type: nil).
	cons:: hdr constructor.

	newInstance:: UnresolvedSendAST new
		to: hereNode
		send: #'@newInstance:'
		with: {UnresolvedSendAST new
			to: selfNode
			send: #basicNew
			with: {}}.
	args:: cons parameters collect:
		[:vd <VarDeclAST> |
		UnresolvedSendAST new
			to: hereNode
			send: (MessageAST new
				send: vd name with: {};
				start: vd start; end: vd end);
		start: vd start; end: vd end].
	msgFromConstructor:: MessageAST new send: (initializerSelectorNameFor: cons selector) with: args.
	msgFromConstructor copyPositionFrom: cons.

	stmts:: List new.
	stmts add: (UnresolvedSendAST new
		to: newInstance
		send: msgFromConstructor;
		copyPositionFrom: cons).
	stmts add: (ReturnStatAST new
		expression: (UnresolvedSendAST new
			to: hereNode
			send: #'@newInstance'
			with: {})).

	body:: CodeBodyAST new
		temporaries: {tempDecl}
		statements: stmts.
	^MethodAST new
		pattern: cons body: body accessModifier: #public;
		copyPositionFrom: hdr
)
buildIncrementalScopeFor: mm <MixinMirror> = (
	| enclosingClass thisClass |
	enclosingClass:: mm declaration enclosingClass.
	nil = enclosingClass ifFalse: [buildIncrementalScopeFor: enclosingClass instanceSide].

	thisClass:: ClassEntry
		forDeclaration: (MessagePatternAST new selector: mm declaration name)
		atDepth: currentDepth.
	thisClass enclosingClass: (currentScope at: #'@currentClass' ifAbsent: [nil]).

	pushScope:: Scope parent: currentScope.
	currentDepth:: currentDepth + 1.

	currentScope at: #'@currentClass' put: thisClass.

	mm slots do:
		[:s <SlotMirror> |
		| se = SlotEntry
			forDeclaration: (MessagePatternAST new selector: s name; accessModifier: s accessModifier)
			atDepth: currentDepth. |
		currentScope at: (namer selectorForSlotInitializer: s) put: se.
		currentScope at: (namer selectorForSlotGetter: s) put: se.
		s isMutable ifTrue:
			[currentScope at: (namer selectorForSlotSetter: s) put: se]].

	mm transientSlots do:
		[:s <SlotMirror> |
		| se = SlotEntry
			forDeclaration: (MessagePatternAST new selector: s name; accessModifier: s accessModifier)
			atDepth: currentDepth. |
		currentScope at: (namer selectorForSlotInitializer: s) put: se.
		currentScope at: (namer selectorForSlotGetter: s) put: se.
		s isMutable ifTrue:
			[currentScope at: (namer selectorForSlotSetter: s) put: se]].

	mm methods do:
		[:m <MethodMirror> |
		| me = MethodEntry
			forDeclaration: (MessagePatternAST new selector: m name; accessModifier: m accessModifier)
			atDepth: currentDepth. |
		currentScope at: m name put: me].

	mm nestedClasses do:
		[:c <ClassDeclarationMirror> |
		| ce = ClassEntry
			forDeclaration: (MessagePatternAST new selector: c name; accessModifier: c accessModifier)
			atDepth: currentDepth. |
		ce enclosingClass: thisClass.
		currentScope at: c name put: ce].
)
checkForDuplicateNames: node <ClassDeclarationAST> = (
	| namesWithDuplicates names duplicateNames |

	namesWithDuplicates:: List new.
	node instanceSide methods do: [:each | namesWithDuplicates add: each selector].

	node header slots do: [:each |
		namesWithDuplicates add: each name.
		each isMutable ifTrue: [namesWithDuplicates add: each name, ':']].

	namesWithDuplicates
		addAll: (node instanceSide nestedClasses collect: [:each | each name]).

	names:: Set new.
	duplicateNames:: Set new.
	namesWithDuplicates do: [:each | | present |
		present:: true.
		names include: each ifNew: [present:: false].
		present ifTrue: [duplicateNames add: each]].

	duplicateNames isEmpty ifFalse: [ | s |
		s:: StringBuilder new.
		s add: 'Class '.
		s add: node name.
		s add: ' has multiple definitions for '.
		duplicateNames
			do: [:each | s add: each asString]
			separatedBy: [ s add: ','].
		s add: '.'.
		Error signal: s asString].
)
private compileClass: node <ClassDeclarationAST> ^<IntermediateClassDeclaration> = (
	| headerNode <ClassHeaderAST> classDecl <IntermediateClassDeclaration> |

	checkForDuplicateNames: node.

	headerNode:: node header.
	classDecl:: IntermediateClassDeclaration new.
	classDecl name: headerNode name.
	classDecl headerSource: (sourceForNode: headerNode).
	classDecl factoryName: headerNode constructor selector.

	currentDepth:: currentDepth + 1.
	within: classDecl instanceSide compileInstanceSide: node.
	within: classDecl classSide compileClassSide: node.
	currentDepth:: currentDepth - 1.

	^classDecl
)
public compileClassHeader2: src <String> within: enclosing <InstanceMixin> ^<IntermediateClassDeclaration> = (
	| tree <ClassDeclarationAST> intermediate <IntermediateClassDeclaration>  |

	currentSource:: src.
	currentScope:: Scope new.
	currentDepth:: 0.

	nil = enclosing ifFalse: [buildIncrementalScopeFor: enclosing].
	tree:: parseClassDeclaration: src , '()'.

	toScope: currentScope addClass: tree.

	nil = enclosing
		ifTrue: [intermediate:: compileClass: tree]
		ifFalse: [intermediate:: within: enclosing compileClassNoAdd: tree].

	^intermediate
)
public compileClassHeader: source <String> within: enclosingIR <IntermediateMixin> = (
	^compileClassSource: (source, '()') within: enclosingIR
)
public compileClassSource: src <String> within: enclosingIR <IntermediateMixin> ^<IntermediateClassDeclaration> = (
	| tree <ClassDeclarationAST> intermediate <IntermediateClassDeclaration>  |

	currentSource:: src.
	currentScope:: Scope new.
	currentDepth:: 0.

	nil = enclosingIR ifFalse: [buildIncrementalScopeFor: enclosingIR builder].
	tree:: parseClassDeclaration: src.

	toScope: currentScope addClass: tree.

	nil = enclosingIR
		ifTrue: [intermediate:: compileClass: tree]
		ifFalse: [intermediate:: within: enclosingIR compileClassNoAdd: tree].

	^intermediate
)
public compileExpressionSource: src <String> debugMapper: debugMapper <MethodContext> withScope: withScope <Map> inMixin: enclosing <MixinMirror> ^<IntermediateMethod> = (
	(* Compile a DoIt method.  If aContext is not nil, compile a DoItIn:ctxt method where accesses to names in scope of the context are rewritten to access through the context.  Cog closures complicate this rewriting compared to BlockContexts, as access might be rather indirect.  Also, in cases where a temp is only a copied value and not in a remote indirection vector, it would be impractical to handle writes such that they actually track down all places where the temp lives and update them.  In these cases, we should merely find the most local copy, which I believe is what closure compiled Squeak does. *)
	|
	body <CodeBodyAST>
	method <MethodAST>
	|

	currentSource:: src.
	currentScope:: Scope new.
	currentDepth:: 0.

	buildIncrementalScopeFor: enclosing.

	(* Parse as a code body *)
	body:: parseExpression: src.

	(* Ensure last statement is a return statement *)
	body statements isEmpty ifFalse:
		[body statements last isKindOfReturnStatNode ifFalse:
			[| last |
			last:: body statements removeLast.
			body statements add: (ReturnStatAST new
				expression: last; start: last start; end: last end)]].

	(* Put into a method *)
	method:: MethodAST new
		pattern: (MessagePatternAST new
			selector: #DoItIn:With:
			parameters:
				{VarDeclAST name: namer doitContextArgumentName type: nil.
				 VarDeclAST name: namer scopeArgumentName type: nil});
		body: body;
		accessModifier: #public;
		start: 1;
		end: src size.

	(* Build scope *)
	pushScope:: Scope parent: currentScope.

	nil = debugMapper ifFalse:
		[debugMapper localNames do:
			[:name <Symbol> |
			 | entry = ContextMappedEntry name: name mapper: debugMapper. |
			 currentScope at: name put: entry.
			 currentScope at: (name,':') asSymbol put: entry]].
	nil = withScope ifFalse:
		[withScope keysAndValuesDo:
			[:key <Symbol> :value |
			 | entry = WithMappedEntry name: key asSymbol. |
			 currentScope at: key asSymbol put: entry.
			 currentScope at: (key,':') asSymbol put: entry]].

	(* Rewrite and compile *)
	^compileMethod: method
)
private compileMethod: node <MethodAST> ^<IntermediateMethod> = (
	| result capturedMap |
	result:: rewriter methodNode: node inScope: currentScope.
	capturedMap:: result apply: ClosureRewriter1 new.
	result:: result apply: (ClosureRewriter2 with: capturedMap).
	result:: result apply: methodCompiler.
	result source: (sourceForNode: node).
	^result
)
public compileMethodSource: src <String> within: enclosing <IntermediateMixin> ^<IntermediateMethod> = (
	| tree <MethodAST> |

	currentSource:: src.
	currentScope:: Scope new.
	currentDepth:: 0.

	buildIncrementalScopeFor: enclosing.

	tree:: parseMethodDeclaration: src.

	^compileMethod: tree.
)
private compileSyntheticMethod: node <MethodAST> ^<IntermediateMethod> = (
	| result <IntermediateMethod> |
	result:: compileMethod: node.
	result isSynthetic: true.
	^result
)
public compileTransientSlotSource: src <String> within: enclosingIR <IntermediateMixin> ^<IntermediateTransientSlotDeclaration> = (
	| tree <SlotDefAST> |

	currentSource:: src.
	currentScope:: Scope new.
	currentDepth:: 0.

	buildIncrementalScopeFor: enclosingIR.

	tree:: parseTransientSlotDeclaration: src.

	^within: enclosingIR compileTransientSlotNoAdd: tree
)
computeSlotInitializersFor: aNode <ClassHeaderAST> ^ <Collection[StmtAST]> = (
	^(aNode slots reject: [:slot | slot initializer isNil]) collect:
		[:slot <SlotDefAST> |
		| aMsg <MessageAST> slotInitializer <ExpressionAST> |
		slotInitializer:: slot initializer.
		aNode isSeq ifFalse: [slotInitializer:: futureFor: slotInitializer].
		aMsg:: MessageAST new
			send: (namer selectorForSlotInitializer: slot) with: {slotInitializer};
			copyPositionFrom: slot.
		UnresolvedSendAST new message: aMsg;
			receiver: (selfNode start: aMsg start; end: aMsg end);
			copyPositionFrom: slot].
)
private createNestedClassAccessorFrom: nestedClassNode <ClassDeclarationAST | MixinApplicationClassAST> = (
	(* Create an accessor method for the nested class represented by the incoming class tree. This accessor will lazily generate the nested class when its enclosing instance is first asked for it. *)
	|
	name <String>
	ast <MethodAST>
	hdr <ClassHeaderAST>
	classTree <NormalSendAST>
	|

	name:: nestedClassNode name.
	classTree:: nestedClassNode isKindOfMixinApplicationClassAST
		ifTrue:
			[astForComputingMixinApplicationClassDeclaration: name
				superCall: nestedClassNode inheritanceChain first
				iList: (allButFirstOf: nestedClassNode inheritanceChain)
				factoryName: nestedClassNode constructor selector]
		ifFalse:
			[hdr:: nestedClassNode header.
			astForComputingClassDeclaration: name
				superCall: hdr superCall
				iList: (allButFirstOf: hdr inheritanceChain)].
	ast:: accessorASTForNestedClassNamed: name
		classTree: classTree
		accessModifier: nestedClassNode accessModifier.
	ast copyPositionFrom: nestedClassNode header.

	^compileSyntheticMethod: ast
)
private createTransientSlotGetter: transientSlotNode <SlotDefAST> = (
(* Build an AST for a method that would lazily create a execute the expression in a transient  slot, and cache it. The generated code has the form

name = (
	nil = self name`slot ifTrue:
		[self init`name`slot: self name`init].
	^self name`slot
)

*)
	|
	initMethodName
	cacheSlotName
	selector
	cacheSlot
	assignSlot
	nilNode
	nilCheck
	block
	if
	return
	initValue
	method
	|

	selector:: transientSlotNode name.

	initMethodName:: IntermediateTransientSlotDeclaration initMethodNameForTransientSlotNamed: selector.
	cacheSlotName:: IntermediateTransientSlotDeclaration slotNameForTransientSlotNamed: selector.

	cacheSlot:: UnresolvedSendAST new
		to: selfNode
		send: cacheSlotName with: {}.

	initValue:: UnresolvedSendAST new
		to: selfNode
		send: initMethodName
		with: {}.
	initValue message copyPositionFrom: transientSlotNode initializer.

	assignSlot:: UnresolvedSendAST new
		to: selfNode
		send: ('init`', cacheSlotName, ':') asSymbol
		with: {initValue}.

	nilNode:: UnresolvedSendAST new
		to: hereNode
		send: #nil
		with: {}.
	nilCheck:: UnresolvedSendAST new
		to: nilNode
		send: #=
		with: {cacheSlot}.

	block:: BlockAST new
		body: (CodeBodyAST new
			parameters: {}
			temporaries: {}
			statements: {assignSlot}).

	if:: UnresolvedSendAST new
		to: nilCheck
		send: #ifTrue:
		with: {block}.
	return:: ReturnStatAST new expression: cacheSlot.

	method:: MethodAST new
		pattern: (MessagePatternAST new
			accessModifier: transientSlotNode accessModifier;
			selector: selector
			parameters: {});
		body: (CodeBodyAST new
			parameters: {}
			temporaries: {}
			statements: {if. return});
		copyPositionFrom: transientSlotNode.

	^compileSyntheticMethod: method
)
private createTransientSlotInitializer: transientSlotNode <SlotDefAST> = (
	| selector messagePattern body return method |
	selector:: IntermediateTransientSlotDeclaration initMethodNameForTransientSlotNamed: transientSlotNode name.
	messagePattern:: MessagePatternAST new
		selector: selector;
		accessModifier: #private;
		parameters: {}.

	return:: ReturnStatAST new
		expression: transientSlotNode initializer;
		copyPositionFrom: transientSlotNode initializer.

	body:: CodeBodyAST new
		parameters: {}
		temporaries: {}
		statements: (List new add: return; yourself).

	method:: MethodAST new
		pattern: messagePattern;
		body: body;
		copyPositionFrom: transientSlotNode.

	^compileSyntheticMethod: method
)
private createTransientSlotSetter: transientSlotNode <SlotDefAST> = (
	| cacheSlotName selector assignToSlot return newValueParameter parameterName parameter method |

	selector:: transientSlotNode name.
	cacheSlotName:: IntermediateTransientSlotDeclaration slotNameForTransientSlotNamed: selector.
	parameterName:: #p1.

	parameter:: UnresolvedSendAST new
		to: hereNode
		send: parameterName
		with: {}.

	assignToSlot:: UnresolvedSendAST new
		to: selfNode
		send: (cacheSlotName, ':') asSymbol
		with: {parameter}.

	return:: ReturnStatAST new
		expression: assignToSlot.

	newValueParameter:: VarDeclAST name: parameterName type: nil.

	method:: MethodAST new
		pattern: (MessagePatternAST new
			accessModifier: transientSlotNode accessModifier;
			selector: (selector, ':') asSymbol
			parameters: {newValueParameter});
		body: (CodeBodyAST new
			parameters: {newValueParameter};
			temporaries: List new;
			statements: (List new add: return; yourself));
			copyPositionFrom: transientSlotNode.

	^compileSyntheticMethod: method
)
enclosingObjectTreeFor: c <ExpressionAST> ^ <NormalSendAST> = (
	^UnresolvedSendAST new
		to: c
		send: (MessageAST new send: #enclosingObjectSlot with: {});
		start: c start; end: c end
)
futureFor: expression <ExpressionAST> ^<ExpressionAST> = (
	(* @here Future computing: [expression] *)
	^UnresolvedSendAST new
		receiver: (UnresolvedSendAST new
			receiver: hereNode;
			message: (MessageAST new selector: #Future; arguments: {}));
		message: (MessageAST new selector: #computing:; arguments: {
			BlockAST new body: (
				 CodeBodyAST new
					parameters: List new;
					temporaries: List new;
					statements: {expression}
			)
		})
)
hereNode ^<VariableAST> = (
	(* Generates an AST representing the implicit receiver. Note we use a name that is not a legal identifier. *)
	^VariableAST new name: #'@here'
)
hereSendFrom: arg <VarDeclAST> ^<MessageNode> = (
	^UnresolvedSendAST new
		to: hereNode
		send: (MessageAST new
			send: arg name
			with: {};
			start: arg start; end: arg end);
		start: arg start; end: arg end
)
inheritanceASTWIthSuperclass: sc <ExpressionAST> iList: iList <List[SendAST]> ^ <NormalSendAST> = (
(*
Produce an AST representing a series of mixin applications corresponding
to the contents of the inheritance chain described by iList, applied to
the tree representing the superclass clause sc.
Each mixin application is provided an index according to its position in
the list. This index is used as a suffix when renaming the instance initializer
of the mixin application, in order to ensure that none of the instance initializers
of the various mixin applications produced conflict with each other.
*)
	^(iList inject: {sc. 1} into: [:nsc <{ExpressionAST. Integer}> :m <SendAST> |
		{UnresolvedSendAST new
				to: (mixinSendTreeFor: m receiver)
				send: #apply:index:enclosingObject:
				with: {nsc first. NumberAST new value: nsc last. enclosingObjectTreeFor: m receiver}.
		nsc last + 1
		}
		]) first.
)
initializerSelectorNameFor: selector <Symbol> ^<Symbol> = (
	^('initializer`', selector) asSymbol
)
mixinCall: number <Integer> inheritanceList: iList <Collection[SendAST]> ^ <NormalSendAST> = (
	(* Probably migrate to superclass *)
	(* create call to superclass initializer *)
	|
	aNode <SendAST> = iList at: number.
	|
	^UnresolvedSendAST new
		to: (VariableAST new
			name: #self;
			copyPositionFrom: aNode)
		send: (MessageAST new
			selector: (superMixinInitializerSelectorFor: aNode message selector number: number - 1);
			arguments: aNode message arguments;
			copyPositionFrom: aNode message);
		copyPositionFrom: aNode
)
mixinInitializationCallsFor: iList <List[SendAST]> ^ <List[StmtAST]> = (
	| stmts <List[StmtAST]> = List new. |
	iList size to: 2 by: -1 do: [:i | stmts addFirst: (mixinCall: i inheritanceList: iList)].
	stmts addFirst: (superFactoryCallFor: iList first).
	^stmts
)
mixinInitializerSelectorNameFor: selector <Symbol> ^<Symbol> = (
	^('mixinInitializer`', selector) asSymbol
)
mixinSendTreeFor: c <ExpressionAST> ^ <NormalSendAST> = (
	^UnresolvedSendAST new
		to: c
		send: (MessageAST new send: #mixin with: {});
		start: c start; end: c end
)
popScope = (
	currentScope:: currentScope parent.
)
pushScope: scope <Scope> = (
	currentScope:: scope
)
selfNode ^<VariableAST> = (
	^VariableAST new name: #self
)
sourceForNode: node <AST> ^ <String> = (
	^currentSource copyFrom: node start to: node end
)
superConstructorCallFor: aNode <ClassHeaderAST> ^<NormalSendAST> = (
	(* create call to super constructor method *)
	|
	var <VariableAST>
	send <NormalSendAST>
	start <Integer>
	end <Integer>
	superMsg <MessageAST>
	args <List[VariableAST]>
	|

	start:: aNode superConstructorCall start.
	end:: aNode superConstructorCall end.
	var:: VariableAST new name: #self; start: start; end: end.
	args:: aNode constructor parameters collect:
		[:p <VarDeclAST> | hereSendFrom: p].
	superMsg:: MessageAST new
		send: (superConstructorNameFor: aNode) with: args;
		start: start; end: end.
	send:: UnresolvedSendAST new to: var send: superMsg; start: start; end: end.
	^send
)
superConstructorNameFor: aNode <ClassHeaderAST> ^ <Symbol> = (
	^(aNode name, '`superInit`', aNode constructor selector) asSymbol
)
superFactoryCallFor: aNode <SendAST> ^ <NormalSendAST> = (
	(* Probably migrate to superclass *)
	(* create call to superclass initializer *)
	^UnresolvedSendAST new
		to: (VariableAST new
			name: #super;
			copyPositionFrom: aNode)
		send: (MessageAST new
			selector: (initializerSelectorNameFor: aNode message selector);
			arguments: aNode message arguments;
			copyPositionFrom: aNode message);
		copyPositionFrom: aNode
)
superMixinInitializerSelectorFor: selector <Symbol> number: i <Integer> ^<Symbol> = (
	^('mixinInitializer`',  i printString, '`', selector ) asSymbol
)
toScope: scope <Scope> addClass: nestedClassNode <ClassDeclarationAST> = (
	| entry = ClassEntry forDeclaration: nestedClassNode atDepth: currentDepth. |
	checkForReservedWord: nestedClassNode selector.
	entry enclosingClass: (currentScope at: #'@currentClass' ifAbsent: [nil]).
	scope
		at: nestedClassNode selector
		put: entry
)
toScope: scope <Scope> addMethod: methodNode <MethodAST> = (
	checkForReservedWord: methodNode selector.
	currentScope
		at: methodNode selector
		put: (MethodEntry forDeclaration: methodNode atDepth: currentDepth).
)
toScope: scope <Scope> addSlot: slotNode <SlotDeclAST> = (
	| entry = SlotEntry forDeclaration: slotNode atDepth: currentDepth. |
	checkForReservedWord: slotNode name.
	scope at: (namer selectorForSlotInitializer: slotNode) put: entry.
	scope at: (namer selectorForSlotGetter: slotNode) put: entry.
	slotNode isMutable ifTrue:
		[scope at: (namer selectorForSlotSetter: slotNode) put: entry].
)
private within: mixinIR <IntermediateMixin> compileClass: nestedClassNode <ClassDeclarationAST> = (
	mixinIR nestedClasses add: (within: mixinIR compileClassNoAdd: nestedClassNode).
)
private within: mixinIR <IntermediateMixin> compileClassNoAdd: nestedClassNode <ClassDeclarationAST> = (
	| nestedClassIR |
	nestedClassIR:: nestedClassNode isKindOfClassDeclarationNode
		ifTrue: [compileClass: nestedClassNode]
		ifFalse: [mixinApplicationClassNode: nestedClassNode in: mixinIR].
	nestedClassIR enclosingClass: mixinIR.
	nestedClassIR accessor: (createNestedClassAccessorFrom: nestedClassNode).
	^nestedClassIR
)
private within: mixinIR <IntermediateMixin> compileClassSide: classNode <ClassDeclarationAST> = (
	| thisClass <ClassEntry> |
	thisClass:: currentScope at: classNode name.
	pushScope:: Scope parent: currentScope.
	currentScope at: #'@currentClass' put: thisClass.
	classNode instanceSide methods do:
		[:methodNode <MethodAST> | toScope: currentScope addMethod: methodNode].

	within: mixinIR compileFactory: classNode header.
	classNode classSide methods do:
		[:methodNode <MethodAST> | within: mixinIR compileMethod: methodNode].

	popScope.
)
private within: mixinIR <IntermediateMixin> compileFactory: headerNode <ClassHeaderAST> = (
	mixinIR declaration factory: (compileSyntheticMethod: (astForPrimaryFactory: headerNode)).
)
private within: mixinIR <IntermediateMixin> compileInitializers: headerNode <ClassHeaderAST> = (
	(* The superclass clause is not a property of the mixin; this method is specific to the application. That said, all applications derived from the class declaration will share it *)
	mixinIR declaration initializers: {
		compileSyntheticMethod: (astForClassDeclarationInitializer: headerNode).
	}.
)
private within: mixinIR <IntermediateMixin> compileInstanceSide: classNode <ClassDeclarationAST> = (
	| thisClass <ClassEntry> |
	thisClass:: currentScope at: classNode name.
	pushScope:: Scope parent: currentScope.
	currentScope at: #'@currentClass' put: thisClass.
	classNode header slots do:
		[:slotNode <SlotDefAST> | toScope: currentScope addSlot: slotNode].
	classNode instanceSide methods do:
		[:methodNode <MethodAST> | toScope: currentScope addMethod: methodNode].
	classNode instanceSide nestedClasses do:
		[:nestedClassNode <ClassDeclarationAST> | toScope: currentScope addClass: nestedClassNode].

	classNode header slots do:
		[:slotNode <SlotDefAST> | within: mixinIR compileSlot: slotNode].
	within: mixinIR compileInitializers: classNode header.
	classNode instanceSide methods do:
		[:methodNode <MethodAST> | within: mixinIR compileMethod: methodNode].
	classNode instanceSide transientSlots do:
		[:transientSlotNode <SlotDefAST> | within: mixinIR compileTransientSlot: transientSlotNode].
	classNode instanceSide nestedClasses do:
		[:nestedClassNode <ClassDeclarationAST> | within: mixinIR compileClass: nestedClassNode].

	popScope.
)
private within: mixinIR <IntermediateMixin> compileMethod: methodNode <MethodAST> = (
	| methodIR = compileMethod: methodNode. |
	mixinIR methods add: methodIR.
)
private within: mixinIR <IntermediateMixin> compileSlot: slotNode <SlotDefAST> = (
	| slotIR = IntermediateSlotDeclaration new. |
	slotIR name: slotNode name.
	slotIR isMutable: slotNode isMutable.
	slotIR accessModifier: slotNode accessModifier.
	mixinIR slots add: slotIR.
)
private within: mixinIR <IntermediateMixin> compileTransientSlot: transientSlotNode <SlotDefAST> = (
	mixinIR transientSlots add: (within: mixinIR compileTransientSlotNoAdd: transientSlotNode)
)
private within: enclosingIR <IntermediateMixin> compileTransientSlotNoAdd: tree <SlotDefAST> = (
	| transientSlotIR = IntermediateTransientSlotDeclaration new. |
	transientSlotIR name: tree name.
	transientSlotIR source: (sourceForNode: tree).
	transientSlotIR initializer: (createTransientSlotInitializer: tree).
	transientSlotIR getter: (createTransientSlotGetter: tree).
	tree isMutable ifTrue:
		[transientSlotIR setter: (createTransientSlotSetter: tree)].
	^transientSlotIR
)
) : (
)
class ContextMappedEntry name: nom mapper: mapper = SymbolTableEntry forAST: nil atDepth: nil (|
	public name = nom.
	debugMapper = mapper.
|) (
public getterAst = (
	^debugMapper getterAstFor: name.
)
public isKindOfMappedBinding = (
	^true
)
public setterAst: newVal = (
	^debugMapper setterAstFor: name putting: newVal.
)
) : (
)
class WithMappedEntry name: nom = SymbolTableEntry forAST: nil atDepth: nil (|
	public name = nom.
|) (
public getterAst = (
	^UnresolvedSendAST new
		receiver: mapAst;
		message: (MessageAST new
			selector: #at:;
			arguments: {SymbolAST new value: name})
)
public isKindOfMappedBinding = (
	^true
)
private mapAst = (
	^UnresolvedSendAST new
		receiver: (VariableAST new name: #'@here');
		message: (MessageAST new
			selector: namer scopeArgumentName;
			arguments: {})
)
public setterAst: newVal = (
	^UnresolvedSendAST new
		receiver: mapAst;
		message: (MessageAST new
			selector: #at:put:;
			arguments: {SymbolAST new value: name. newVal})
)
) : (
)
ClassEntry = (
	^super ClassEntry
)
LocalEntry = (
	^super LocalEntry
)
MethodEntry = (
	^super MethodEntry
)
Scope = (
	^super Scope
)
SlotEntry = (
	^super SlotEntry
)
SymbolTableEntry = (
	^super SymbolTableEntry
)
assert: condition = (
	condition ifFalse: [Error signal: 'Assert failed'].
)
assert: condition message: message = (
	condition ifFalse: [Error signal: message].
)
check: value between: min and: max = (
	value >= min ifTrue: [value <= max ifTrue: [^self]].
	Error signal: 'Encoding out of range'.
)
namer = (
	^super namer
)
parseClassDeclaration: input <String> = (
	^(Parser for: input) advanceToken parseClassDeclarationEnd
)
parseExpression: input <String> = (
	^(Parser for: input) advanceToken parseDoItExpressionEnd
)
parseMethodDeclaration: input <String> = (
	^(Parser for: input) advanceToken parseMethodDeclarationEnd
)
parseTransientSlotDeclaration: input <String> = (
	^(Parser for: input) advanceToken parseTransientSlotDeclarationEnd
)
) : (
)
