(* Abstract syntax tree node classes for Newspeak.

Issues:
The abbreviations in class and slot names should be replaced with proper identifiers.
Possibly ASTs for self/super/outer/implicitReceiver should be defined here.
The factory selector should be changed to #usingPlatform:.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2010 Felix Geller and Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
class NewspeakASTs usingPlatform: platform = (
|
	private List = platform collections List.
|) (
(* An abstract syntax tree. An AST knows where in the source code the corresponding construct is. The slots start and end are indices into the source code marking that position. *)
public class AST = (
|
public start <Integer> ::= 0. (* Note that 0 is out-of-bounds in a Newspeak string. *)
public end <Integer> ::= 0.
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^self subclassResponsibility
)
assert: condition = (
	condition ifFalse: [Error signal: 'Assert failed'].
)
assert: condition message: message = (
	condition ifFalse: [Error signal: message].
)
public copyPositionFrom: other <AST> = (
	self start: other start.
	self end: other end.
)
public isKindOfAST ^<Boolean> = ( ^true )
public isKindOfBlockLocalReturnAST ^<Boolean> = ( ^false )
public isKindOfBlockNode ^<Boolean> = ( ^false )
public isKindOfBooleanNode ^<Boolean> = ( ^false )
public isKindOfCascadedSendNode ^<Boolean> = ( ^false )
public isKindOfClassDeclarationNode ^<Boolean> = ( ^false )
public isKindOfClassHeaderAST ^<Boolean> = ( ^false )
public isKindOfCodeBodyNode ^<Boolean> = ( ^false )
public isKindOfLiteralNode ^<Boolean> = ( ^false )
public isKindOfMixinApplicationClassAST ^<Boolean> = ( ^false )
public isKindOfNilNode ^<Boolean> = ( ^false )
public isKindOfNumberNode ^<Boolean> = ( ^false )
public isKindOfReceiverNode ^<Boolean> = ( ^false )
public isKindOfReturnStatNode ^<Boolean> = ( ^false )
public isKindOfSendNode ^<Boolean> = ( ^false )
public isKindOfTupleNode ^<Boolean> = ( ^false )
public isKindOfUnresolvedSendNode ^<Boolean> = ( ^false )
public isKindOfVariableNode ^<Boolean> = ( ^false )
) : (
)
public class ASTTool = () (
public blockNode: aNode <BlockAST> = (
	self subclassResponsibility
)
public cascadedSendNode: aNode <CascadedSendAST> = (
	self subclassResponsibility
)
public characterNode: aNode <CharacterAST> = (
	self subclassResponsibility
)
public classNode: aNode <ClassAST> = (
	self subclassResponsibility
)
public codeBodyNode: aNode <CodeBodyAST> = (
	self subclassResponsibility
)
public messageNode: aNode <MessageAST> = (
	self subclassResponsibility
)
public messagePatternNode: aNode <MessagePatternAST> = (
	self subclassResponsibility
)
public methodNode: aNode <MethodAST> = (
	self subclassResponsibility
)
public mixinApplication: node <MixinApplicationAST> = (
	self subclassResponsibility
)
public mixinApplicationClass: node <MixinApplicationClassAST> = (
	self subclassResponsibility
)
public numberNode: aNode <NumberAST> = (
	self subclassResponsibility
)
public returnStatNode: aNode <ReturnStatAST> = (
	self subclassResponsibility
)
public setterSendNode: aNode <SetterSendAST> = (
	self subclassResponsibility
)
public sideNode: aNode <SideAST> = (
	self subclassResponsibility
)
public stringNode: aNode <StringAST> = (
	self subclassResponsibility
)
public symbolNode: aNode <SymbolAST> = (
	self subclassResponsibility
)
public tupleNode: aNode <TupleAST> = (
	self subclassResponsibility
)
public unresolvedSendNode: aNode <UnresolvedSendAST> = (
	self subclassResponsibility
)
public varDeclNode: aNode <VarDeclAST> = (
	self subclassResponsibility
)
public variableNode: aNode <VariableAST> = (
	(* can only be a pseudo variable : self or _here *)
	self subclassResponsibility
)
) : (
)
public class BlockAST = AST (|
	public body <CodeBodyAST>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool blockNode: self
)
public isKindOfBlockNode ^<Boolean> = ( ^true )
public parameters ^ <List[ParameterAST]> = (
	^body parameters
)
) : (
)
public class CascadedSendAST = SendAST (|
	public previousSend <SendAST>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool cascadedSendNode: self
)
public end = (
	(* Currently the parser doesn't set start or end positions for
	cascades, so compute from the receiver's elements.  But
	if the parser ever does set the position, take it directly. *)
	^super end = 0
		ifFalse: [super end]
		ifTrue: [message end]
)
public isKindOfCascadedSendNode ^<Boolean> = ( ^true )
public receiver ^ <ExpressionAST> = (
	^self previousSend receiver
)
public start = (
	(* Currently the parser doesn't set start or end positions for
	cascades, so compute from the receiver's elements.  But
	if the parser ever does set the position, take it directly. *)
	^super start = 0
		ifFalse: [super start]
		ifTrue: [previousSend start]
)
public to: aSend <SendAST> cascade: aMessage <MessageAST> = (
	self assert: aSend isKindOfSendNode.
	self assert: aMessage isKindOfMessageNode.
	self previousSend: aSend; message: aMessage.
)
) : (
)
public class CharacterAST = LiteralAST () (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool characterNode: self
)
) : (
)
public class ClassBodyAST initializer: init <InitializerAST> instanceSide: iSide <SideAST> classSide: cSide <SideAST> = AST (
(* AST for a class body. *)
|
	public instanceInitializer <InitializerAST> = init.
	public instanceSide <SideAST> = iSide.
	public classSide <SideAST> = cSide.
|start:: instanceInitializer start.
end:: classSide end max: instanceSide end) (
) : (
)
public class ClassDeclarationAST = AST (|
	public header <ClassHeaderAST>
	public instanceSide <SideAST>
	public classSide <SideAST>
|) (
public accessModifier ^<Symbol> = (
	^header accessModifier
)
public apply: tool <ASTTool[T]> ^<T> = (
	^tool classNode: self
)
public isKindOfClassDeclarationNode ^<Boolean> = (
	^true
)
public name ^ <Symbol> = (
	^header name
)
public selector ^<Symbol> = (
	^header name
)
public superclassName ^ <Symbol> = (
	^header superclassName
)
) : (
public makeMixinNamed: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST>
 ^ <ClassDeclarationAST> = (
(* adaptor factory method for transition. Using this method, we can create an AST compatible with the unmodified compiler based on the revised parser. *)
	|
	superCall <SendAST> = iList first.
	instanceInitializer <InitializerAST> = body instanceInitializer.
	header = ClassHeaderAST new
				name: klassName value asSymbol;
				constructor: cons;
				superclassName: superCall receiver message selector;
				superclassCall: superCall receiver;
				superConstructorCall: superCall message;
				slots: instanceInitializer slots;
				isSeq: instanceInitializer isSeq;
				initExprs: instanceInitializer initializationExpressions;
				inheritanceChain: iList;
				start: klassName start; end: instanceInitializer end.
	|
	^new
		header: header;
		instanceSide: body instanceSide;
		classSide: body classSide
)
public named: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST>
 ^ <ClassDeclarationAST> = (
	^body isNil
		ifTrue: [MixinApplicationClassAST named: klassName value factoryMsg: cons inheriting: iList]
		ifFalse: [makeMixinNamed: klassName factoryMsg: cons inheriting: iList body: body]
)
)
public class ClassHeaderAST = AST (|
	public accessModifier
	public name <Symbol>
	public constructor <MessagePatternAST>
	public superclassName <Symbol>
	public superclassCall <NormalSendAST>
	public superConstructorCall <MessageAST>
	public slots <List[SlotDefAST]>
	public isSeq <Boolean>
	public initExprs <List[ExpressionAST]>
	public inheritanceChain <List[SendAST]>
 |) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool classHeaderNode: self
)
public isKindOfClassHeaderAST = (
	^true
)
public superCall ^ <SendAST> = (
	^inheritanceChain first
)
) : (
)
(* A class prefix defines everything about a class except for its mixin.
It is intended to serve as a common component between ordinary class declarations and mixin applications. *)
public class ClassPrefixAST name: n
	constructor: k
	superclassName: sn
	superclassCall: scc
	superConstructorCall: sk = AST (
|
	public name <Symbol> = n.
	public constructor <MessagePatternAST> = k.
	public superclassName <Symbol> = sn.
	public superclassCall <NormalSendAST> = scc.
	public superConstructorCall <MessageAST> = sk.
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool classPrefix: self
)
) : (
)
public class CodeBodyAST = AST (|
	public parameters <List[ParameterAST]>
	public temporaries <List[TemporaryAST]>
	public statements <List[StatementAST]>
	public isSeq <Boolean> ::=true.
	public pragmas <List[MessageAST]>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool codeBodyNode: self
)
public isKindOfCodeBodyNode ^<Boolean> = (^true)
public parameters: pars <List[ParameterAST]> temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = (
	self parameters: pars; temporaries: temps; statements: stats
)
public temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = (
	self parameters: List new; temporaries: temps; statements: stats
)
) : (
)
public class ImmutableSlotDefAST = SlotDefAST () (
public isMutable ^<Boolean> = (
	^false
)
) : (
)
(* AST for an instance initializer clause. *)
public class InitializerAST slots: s initializerExpressions: es comment: c slotsAreSequential: seq = AST (
|
	public slots = s.
	public initializationExpressions <List[ExpressionAST]> = es.
	public isSeq <Boolean> = seq.
|) (
) : (
)
public class LiteralAST = AST (|
	public value <Object>
|) (
public isKindOfLiteralNode ^<Boolean> = (^true)
) : (
)
public class MessageAST = AST (|
	public selector <Symbol>
	public arguments <List[ExpressionAST]>
	public isEventual <Boolean> ::= false.
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool messageNode: self
)
public isKindOfMessageNode ^<Boolean> = (^true)
public send: sel <Symbol> with: args <List[ExpressionAST]> = (
	self selector: sel; arguments: args
)
) : (
)
public class MessagePatternAST = AST (
|
	public accessModifier <Symbol>
	public selector <Symbol>
	public parameters <List[ParameterAST]>
	public returnType <TypeAST>
	public typePattern <TypePatternAST>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool messagePatternNode: self
)
public selector: s <Symbol> parameters: p <List[ParameterAST]> = (
  self selector: s; parameters: p
)
public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t <TypeAST> = (
  self selector: s; parameters: p; returnType: t
)
public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t <TypeAST> typePattern: tp <TypePatternAST> = (
  self selector: s; parameters: p; returnType: t; typePattern: tp
)
public selector: s <Symbol> returnType: t <TypeAST> = (
  self selector: s; returnType: t
)
) : (
)
public class MethodAST = AST (|
	public pattern <MessagePatternAST>
	public body <CodeBodyAST>
|) (
public accessModifier ^ <Symbol> = (
	^pattern accessModifier
)
public accessModifier: am <Symbol> = (
	pattern accessModifier: am
)
public apply: tool <ASTTool[T]> ^<T> = (
	^tool methodNode: self
)
public pattern: p <MessagePatternAST> body: b <CodeBodyAST> accessModifier: am <Symbol> = (
	pattern: p.
	body: b.
	accessModifier: am.
)
public selector ^<Symbol> = (
	^pattern selector
)
) : (
)
(* This class represents a class defined via a mixin application - that is, a class that does not provide a class body. *)
public class MixinApplicationClassAST named: klassName factoryMsg: cons inheriting: iList = AST (
|
	public accessModifier <Symbol>
	public name <Symbol> = klassName asSymbol.
	public constructor <MessagePatternAST> = cons.
	public inheritanceChain <List[SendAST]> = iList.
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool mixinApplicationClass: self
)
public isKindOfMixinApplicationClassAST ^<Boolean> = (
	^true
)
) : (
)
public class MutableSlotDefAST = SlotDefAST () (
public isMutable ^ <Boolean> = (^true)
) : (
)
public class NumberAST = LiteralAST () (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool numberNode: self
)
public isKindOfNumberNode ^<Boolean> = ( ^true )
) : (
)
public class ReturnStatAST = AST (|
	public expression <ExpressionAST>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool returnStatNode: self
)
public isKindOfReturnStatNode ^<Boolean> = ( ^true )
) : (
)
public class SendAST send: aMsg = AST (|
	public message <MessageAST> ::= aMsg.
|) (
public isKindOfSendNode ^<Boolean> = ( ^true )
public receiver = (
	^self subclassResponsibility
)
) : (
)
public class SetterSendAST to: r <ExpressionAST> send: m <MessageAST> start: s <integer> end: e <Integer> = SendAST send: m (|
	public receiver <ExpressionAST> ::= r.
|
	start: s.
	end: e.
) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool setterSendNode: self
)
) : (
)
(* An AST for one side of a class *)
public class SideAST = AST (
|
	public nestedClasses <Collection[ClassDeclarationAST]>
	public methods <Collection[MethodAST]>
	public transientSlots <List[SlotDefAST]>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool sideNode: self
)
) : (
)
public class SlotDefAST = AST (|
	public slotDecl <VariableAST>
	public initializer <ExpressionAST>
	public accessModifier
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool slotDefNode: self
)
public isMutable ^ <Boolean> = (self subclassResponsibility)
public name ^ <Symbol> = (
	^slotDecl name
)
) : (
)
public class StringAST = LiteralAST () (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool stringNode: self
)
) : (
)
public class SymbolAST = LiteralAST () (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool symbolNode: self
)
) : (
)
public class TupleAST = AST (|
	public elements <List[ExpressionAST]>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool tupleNode: self
)
public isKindOfTupleNode ^<Boolean> = ( ^true )
) : (
)
public class UnresolvedSendAST = SendAST (|
	public receiver <ExpressionAST>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool unresolvedSendNode: self
)
public isKindOfUnresolvedSendNode ^<Boolean> = (
	^true
)
public to: anExpression <ExpressionAST> send: aMessage <MessageAST> = (
	self receiver: anExpression; message: aMessage
)
public to: anExpression <ExpressionAST> send: selector with: arguments = (
	to: anExpression send: (MessageAST new send: selector with: arguments)
)
) : (
)
public class VarDeclAST name: aName type: aType = AST (|
	public name <Symbol> = aName.
	public type <TypeAST> = aType.
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool varDeclNode: self
)
) : (
)
public class VariableAST = AST (|
	public name <Symbol>
|) (
public apply: tool <ASTTool[T]> ^<T> = (
	^tool variableNode: self.
)
public isKindOfVariableNode ^<Boolean> = (^true)
) : (
)
) : (
)
