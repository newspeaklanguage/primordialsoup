(* Serialization. *)
class PrimordialFuel usingPlatform: p internalKernel: k = (|
private List = p collections List.
private IdentityMap = k IdentityMap.

(* Classes which require special handling. *)
private SmallInteger = k SmallInteger.
private MediumInteger = k MediumInteger.
private LargeInteger = k LargeInteger.
private Float = k Float.
private ByteArray = k ByteArray.
private String = k String.
private Array = k Array.
private WeakArray = k WeakArray.
private Ephemeron = k Ephemeron.
private Activation = k Activation.
private Closure = k Closure.
private Metaclass = k Metaclass.

private True = k True.
private False = k False.
private UndefinedObject = k UndefinedObject.
private Fraction = k Fraction.
private Method = k Method.
private SlotDeclaration = k SlotDeclaration.
private Class = k Class.
private InstanceMixin = k InstanceMixin.
private ClassMixin = k ClassMixin.
|) (
public class Deserializer = (|
stream <ReadStream>
clusters <Array>
refs <Array>
nextRefIndex <Integer>
|) (
class ActivationCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		object sender: readRef.
		object bci: readRef.
		object method: readRef.
		object closure: readRef.
		object receiver: readRef.
		object size: stream leb128.
		1 to: object size do:
			[:index | object tempAt: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: Activation new].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class ArrayCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: object size do:
			[:index | object at: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: (Array new: stream leb128)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class ByteArrayCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	(* ByteArray accessors are known to be side-effect free. *)
	stream leb128 timesRepeat:
		[ | size = stream leb128. object = ByteArray new: size. |
		1 to: size do: [:index | object at: index put: stream uint8].
		registerRef: object].
)
) : (
)
class ClosureCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		definingActivationOf: object put: readRef.
		initialBCIOf: object put: readRef.
		numArgsOf: object put: readRef.
		1 to: (numCopiedOf: object) do:
			[:index | copiedOf: object at: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: (closureWithNumCopied: stream leb128)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class EphemeronCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	readRef.
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		object key: readRef.
		object value: readRef.
		object finalizer: readRef].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: Ephemeron new].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class FloatCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	stream leb128 timesRepeat:
		[registerRef: stream float64].
)
) : (
)
class IntegerCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	stream leb128 timesRepeat:
		[registerRef: stream sleb128].
)
) : (
)
class LargeIntegerCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	(* :todo: Add and use direct digit accessors. *)
	stream leb128 timesRepeat:
		[ | negative digitLength integer |
		negative:: stream uint8 = 1.
		digitLength:: stream leb128.
		integer:: 0.
		0 to: digitLength - 1 << 3 by: 8 do:
			[:shift | integer:: integer | (stream uint8 << shift)].
		negative ifTrue: [integer:: 0 - integer].
		registerRef: integer].
)
) : (
)
class RegularObjectCluster for: format = (|
numSlots <Integer> = format.
klass
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		class: klass adoptInstance: object].
)
public readEdges = (
	klass:: readRef.
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: numSlots do:
			[:index | slotOf: object at: index put: readRef]].
)
public readNodes = (
	| allocClass = TemporaryClass withFormat: numSlots. |
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: allocClass vfBasicNew].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class StringCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	stream leb128 timesRepeat: [
		| size = stream leb128. acc = ByteArray new: size. |
		1 to: size do: [:index | acc at: index put: stream uint8].
		registerRef: (String withAll: acc)].

	stream leb128 timesRepeat: [
		| size = stream leb128. acc = ByteArray new: size. |
		1 to: size do: [:index | acc at: index put: stream uint8].
		registerRef: (String withAll: acc) asSymbol].
)
) : (
)
class WeakArrayCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: object size do:
			[:index | object at: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream leb128 timesRepeat:
		[registerRef: (WeakArray new: stream leb128)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
public deserialize: bytes = (
	| numClusters |
	stream:: ReadStream over: bytes.
	assert: [stream uint16 = 16r1984] message: 'Not VictoryFuel'.
	assert: [stream leb128 = version] message: 'Version mismatch'.
	numClusters:: stream leb128.
	clusters:: Array new: numClusters.
	refs:: Array new: stream leb128.
	nextRefIndex:: 1.
	sharedObjects do: [:sharedObject | registerRef: sharedObject].

	1 to: numClusters do: [:i | clusters at: i put: readCluster readNodes].
	1 to: numClusters do: [:i | (clusters at: i) readEdges].
	1 to: numClusters do: [:i | (clusters at: i) adoptInstances].

	^readRef
)
readCluster = (
	| format ::= stream sleb128. |

	format >= 0 ifTrue: [^RegularObjectCluster for: format].

	format = kIntegerCluster ifTrue: [^IntegerCluster new].
	format = kLargeIntegerCluster ifTrue: [^LargeIntegerCluster new].
	format = kFloatCluster ifTrue: [^FloatCluster new].
	format = kByteArrayCluster ifTrue: [^ByteArrayCluster new].
	format = kStringCluster ifTrue: [^StringCluster new].
	format = kArrayCluster ifTrue: [^ArrayCluster new].
	format = kWeakArrayCluster ifTrue: [^WeakArrayCluster new].
	format = kEphemeronCluster ifTrue: [^EphemeronCluster new].
	format = kActivationCluster ifTrue: [^ActivationCluster new].
	format = kClosureCluster ifTrue: [^ClosureCluster new].

	unknownFormat.
)
readRef = (
	^refs at: stream leb128
)
registerRef: object = (
	refs at: nextRefIndex put: object.
	nextRefIndex:: 1 + nextRefIndex.
)
) : (
)
public class ReadStream over: bytes <ByteArray> = (|
data <ByteArray> = bytes.
position <Integer> ::= 0.
|) (
public float32 ^<Float> = (
	| result |
	result:: data float32At: position.
	position:: 4 + position.
	^result
)
public float64 ^<Float> = (
	| result |
	result:: data float64At: position.
	position:: 8 + position.
	^result
)
public int16 ^<Integer> = (
	| result |
	result:: data int16At: position.
	position:: 2 + position.
	^result
)
public int32 ^<Integer> = (
	| result |
	result:: data int32At: position.
	position:: 4 + position.
	^result
)
public int64 ^<Integer> = (
	| result |
	result:: data int64At: position.
	position:: 8 + position.
	^result
)
public int8 ^<Integer> = (
	| result |
	result:: data int8At: position.
	position:: 1 + position.
	^result
)
public leb128 ^<Integer> = (
	| d p shift byte result |
	result:: (byte:: (d:: data) at: (p:: 1 + position)) & 127.
	shift:: 7.
	[byte > 127] whileTrue:
		[byte:: d at: (p:: 1 + p).
		 result:: 127 & byte << shift | result.
		 shift:: 7 + shift].
	position:: p.
	^result
)
public sleb128 ^<Integer> = (
	| d p shift byte result |
	d:: data.
	p:: position.
	shift:: 0.
	result:: 0.
	[byte:: d at: (p:: 1 + p).
	 result:: 127 & byte << shift | result.
	 shift:: 7 + shift.
	 byte > 127] whileTrue.
	position:: p.
	byte >= 64 ifTrue:
		[^-1 << shift | result].
	^result
)
public uint16 ^<Integer> = (
	| result |
	result:: data uint16At: position.
	position:: 2 + position.
	^result
)
public uint32 ^<Integer> = (
	| result |
	result:: data uint32At: position.
	position:: 4 + position.
	^result
)
public uint64 ^<Integer> = (
	| result |
	result:: data uint64At: position.
	position:: 8 + position.
	^result
)
public uint8 ^<Integer> = (
	| result |
	result:: data uint8At: position.
	position:: 1 + position.
	^result
)
) : (
)
public class Serializer = (
|
stream = WriteStream new.
clusters = IdentityMap new: 32.
orderedClusters = List new.
ephemerons
stack = List new.
refs = IdentityMap new: 256.
nextRefIndex
|
) (
class ActivationCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Activation accessors are known to be side-effect free. *)
	enqueue:: object sender.
	enqueue:: object bci.
	enqueue:: object method.
	enqueue:: object closure.
	enqueue:: object receiver.
	(* enqueue:: object numTemps
	Cannot use back reference for allocation size. *)
	1 to: object size do: [:index | enqueue: (object tempAt: index)].
)
public writeEdges = (
	(* Activation accessors are known to be side-effect free. *)
	objects do: [:object |
		writeRef: object sender.
		writeRef: object bci.
		writeRef: object method.
		writeRef: object closure.
		writeRef: object receiver.
		stream leb128: object size. (* !!!! *)
		1 to: object size do: [:index | writeRef: (object tempAt: index)]].
)
public writeNodes = (
	writeFormat: kActivationCluster.
	stream leb128: objects size.
	objects do: [:object |
		registerRef: object.
		(* :todo: Have small and large contexts?
		stream uint8: isLarge *)].
)
) : (
)
class ArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Array accessors are known to be side-effect free. *)
	1 to: object size do: [:index | enqueue: (object at: index)].
)
public replace: old with: neu = (
	(* Array equality is known to be identity. *)
	1 to: objects size do:
		[:index | old = (objects at: index) ifTrue: [objects at: index put: neu]].
)
public writeEdges = (
	(* Array accessors are known to be side-effect free. *)
	objects do: [:object |
		1 to: object size do: [:index | writeRef: (object at: index)]].
)
public writeNodes = (
	writeFormat: kArrayCluster.
	stream leb128: objects size.
	(* Array accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream leb128: object size].
)
) : (
)
class ByteArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kByteArrayCluster.
	stream leb128: objects size.
	(* ByteArray accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream leb128: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].
)
) : (
)
class ClosureCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	enqueue:: definingActivationOf: object.
	enqueue:: initialBCIOf: object.
	enqueue:: object numArgs.

	1 to: (numCopiedOf: object) do: [:index | enqueue: (copiedOf: object at: index)].
)
public writeEdges = (
	objects do: [:object |
		writeRef:: definingActivationOf: object.
		writeRef:: initialBCIOf: object.
		writeRef:: object numArgs.
		1 to: (numCopiedOf: object) do: [:index | writeRef: (copiedOf: object at: index)]]
)
public writeNodes = (
	writeFormat: kClosureCluster.
	stream leb128: objects size.
	objects do: [:object |
		registerRef: object.
		stream leb128: (numCopiedOf: object)].
)
) : (
)
class EphemeronCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
	enqueue: object finalizer.
)
public retrace = (
	objects do:
		[:object | (hasRef: object key) ifTrue:
			[enqueue: object value]].
)
public writeEdges = (
	writeRef: Ephemeron.
	objects do: [:object |
		writeWeakRef: object key.
		writeWeakRef: object value.
		writeRef: object finalizer].
)
public writeNodes = (
	writeFormat: kEphemeronCluster.
	stream leb128: objects size.
	objects do: [:object | registerRef: object].
)
) : (
)
class FloatCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kFloatCluster.
	stream leb128: objects size.
	objects do: [:object |
		registerRef: object.
		stream float64: object].
)
) : (
)
class IntegerCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kIntegerCluster.
	stream leb128: objects size.
	objects do: [:object |
		registerRef: object.
		stream sleb128: object].
)
) : (
)
class LargeIntegerCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	(* :todo: Add and use direct digit accessors. *)
	writeFormat: kLargeIntegerCluster.
	stream leb128: objects size.
	objects do: [:object | | abs tmp digitLength |
		registerRef: object.
		object < 0
			ifTrue:
				[stream uint8: 1.
				abs:: 0 - object]
			ifFalse:
				[stream uint8: 0.
				abs:: object].
		tmp:: abs.
		digitLength:: 0.
		[0 = tmp] whileFalse:
			[digitLength:: digitLength + 1.
			 tmp:: tmp >> 8].
		stream leb128: digitLength.
		tmp:: abs.
		digitLength timesRepeat:
			[stream uint8: (tmp bitAnd: 255).
			 tmp:: tmp >> 8]].
)
) : (
)
class RegularObjectCluster for: k = (|
klass = k.
slotFilter = computeSlotFilter: k.
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	1 to: slotFilter size do:
		[:index | (slotFilter at: index) = 0 ifFalse:
			[enqueue: (slotOf: object at: index)]].
)
computeSlotFilter: k <Behavior> = (
	(* Answer a byte array describing which slots should be serialized. Transients slots and the class index should not be serialized. *)
	| filter cursor cls instancesAreBehaviors ::= false. |
	filter:: ByteArray new: (slotOf: k at: 6).
	cursor:: filter size.
	cls:: k.
	[ | slots = (slotOf: cls at: 4) _slots. |
	 slots size to: 1 by: -1 do:
		[:index |
		 filter at: cursor put: ((slots at: index) isTransient ifTrue: [0] ifFalse: [1]).
		 cursor:: cursor - 1].
	 cls:: slotOf: cls at: 1.
	 nil = cls] whileFalse.
	cursor = 0 ifFalse: [panic].

	Metaclass = klass ifTrue: [instancesAreBehaviors:: true].
	Metaclass = (classOf: klass) ifTrue: [instancesAreBehaviors:: true].
	instancesAreBehaviors ifTrue: [filter at: 5 put: 0].
	^filter
)
public writeEdges = (
	| filter = slotFilter. |
	writeRef: klass.
	objects do:
		[:object | 1 to: filter size do:
			[:index | writeRef: ((filter at: index) = 0 ifFalse:
				[slotOf: object at: index])]].
)
public writeNodes = (
	writeFormat: slotFilter size.
	stream leb128: objects size.
	objects do: [:object | registerRef: object].
)
) : (
)
class StringCluster = (|
noncanonical = List new.
canonical = List new.
|) (
public analyze: object = (
	(isCanonical: object)
		ifTrue: [canonical add: object]
		ifFalse: [noncanonical add: object].
)
public symbols = (
	^canonical asArray
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kStringCluster.

	(* String accessors are known to be side-effect free. *)
	stream leb128: noncanonical size.
	noncanonical do: [:object |
		registerRef: object.
		stream leb128: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].

	stream leb128: canonical size.
	canonical do: [:object |
		registerRef: object.
		stream leb128: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].
)
) : (
)
class WeakArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Not traced. *)
)
public writeEdges = (
	(* WeakArray accessors are known to be side-effect free. *)
	objects do: [:object |
		1 to: object size do: [:index | writeWeakRef: (object at: index)]].
)
public writeNodes = (
	writeFormat: kWeakArrayCluster.
	stream leb128: objects size.
	(* WeakArray accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream leb128: object size].
)
) : (
)
analyze: object = (
	(clusterForClass: (classOf: object)) analyze: object
)
clusterForClass: klass = (
	^clusters at: klass ifAbsentPut: [newClusterForClass: klass].
)
createSpecialClassClusters = (
	| intCluster |
	intCluster:: IntegerCluster new.
	clusters at: SmallInteger put: intCluster.
	clusters at: MediumInteger put: intCluster.
	orderedClusters add: intCluster.

	orderedClusters add: (clusters at: LargeInteger put: LargeIntegerCluster new).
	orderedClusters add: (clusters at: Float put: FloatCluster new).
	orderedClusters add: (clusters at: ByteArray put: ByteArrayCluster new).
	orderedClusters add: (clusters at: String put: StringCluster new).
	orderedClusters add: (clusters at: Array put: ArrayCluster new).
	orderedClusters add: (clusters at: WeakArray put: WeakArrayCluster new).
	ephemerons:: EphemeronCluster new.
	orderedClusters add: (clusters at: Ephemeron put: ephemerons).
	orderedClusters add: (clusters at: Activation put: ActivationCluster new).
	orderedClusters add: (clusters at: Closure put: ClosureCluster new).

	(* Eagerly create the class. Avoids the mixin's application set from reallocating its backing store between analysis and writing edges. *)
	RegularObjectCluster.
)
enqueue: object = (
	(refs at: object ifAbsentPutVal: 0) ifTrue: [stack add: object].
)
hasRef: object = (
	^refs includesKey: object
)
newClusterForClass: klass = (
	| cluster |
	enqueue: klass.
	cluster:: RegularObjectCluster for: klass.
	orderedClusters add: cluster.
	^cluster
)
preRegisterRef: object = (
	refs at: object put: nextRefIndex.
	nextRefIndex:: nextRefIndex + 1.
)
registerRef: object = (
	refs at: object putReplace: nextRefIndex.
	nextRefIndex:: nextRefIndex + 1.
)
public serialize: root = (
	nextRefIndex:: 1.

	sharedObjects do: [:sharedObject | preRegisterRef: sharedObject].
	createSpecialClassClusters.

	enqueue: root.
	[stack isEmpty] whileFalse:
		[[stack isEmpty] whileFalse: [analyze: stack removeLast].
		 ephemerons retrace].

	stream uint16: 16r1984.
	stream leb128: version.
	stream leb128: orderedClusters size.
	stream leb128: refs size.
	orderedClusters do: [:c | c writeNodes].
	orderedClusters do: [:c | c writeEdges].
	writeRef: root.

	^stream asByteArray
)
writeFormat: format = (
	stream sleb128: format.
)
writeRef: object = (
	stream leb128: (refs at: object).
)
writeWeakRef: object = (
	stream leb128: (refs at: object ifAbsent: [refs at: nil])
)
) : (
)
public class Snapshotter = Serializer (
|
replacements = IdentityMap new: 128.
symbolTablePlaceholder = {}.
canonicalLiterals = List new.
canonicalBytecode = List new.
empty = Array new: 0.
keepSource ::= false.
|
) (
canonicalize: list in: canonicalLists = (
	nil = list ifTrue: [^nil]. (* Slot accessors have nil literals and bytecode. *)
	canonicalLists do: [:canonicalList | (list: list equals: canonicalList) ifTrue: [^canonicalList]].
	canonicalLists add: list.
	^list
)
canonicalizeEmpty: array = (
	0 = array size ifTrue: [^empty].
	^array
)
enqueue: object = (
	^super enqueue: (replace: object)
)
list: a equals: b = (
	a size = b size ifFalse: [^false].
	1 to: a size do: [:index | (a at: index) = (b at: index) ifFalse: [^false]].
	^true
)
replace: object = (
	Method = (classOf: object) ifTrue: [^replaceMethod: object].
	InstanceMixin = (classOf: object) ifTrue: [^replaceMixin: object].
	SlotDeclaration = (classOf: object) ifTrue: [^replaceSlot: object].
	^replacements atOrItself: object
)
replaceClass: old with: nue = (
	replacements at: old put: nue.
	replacements at: (classOf: old) put: (classOf: nue)
)
replaceMethod: method = (
	^replacements at: method ifAbsentPut:
		[ | newMethod = Method new. |
		 newMethod header: method header.
		 newMethod literals: (canonicalize: method literals in: canonicalLiterals).
		 newMethod bytecode: (canonicalize: method bytecode in: canonicalBytecode).
		 newMethod mixin: method mixin.
		 newMethod selector: method selector.
		 newMethod metadata: (replaceSource: method metadata).
		 newMethod]
)
replaceMixin: mixin = (
	^replacements at: mixin ifAbsentPut:
		[ | newMixin = InstanceMixin new. |
		 newMixin _name: mixin _name.
		 newMixin _methods: mixin _methods.
		 newMixin _enclosingMixin: mixin _enclosingMixin.
		 newMixin _slots: (canonicalizeEmpty: mixin _slots).
		 newMixin _nestedMixins: (canonicalizeEmpty: mixin _nestedMixins).
		 newMixin _applications: mixin _applications.
		 newMixin _classMixin: mixin _classMixin.
		 newMixin _accessModifier: mixin _accessModifier.
		 newMixin _primaryFactorySelector: mixin _primaryFactorySelector.
		 newMixin _headerSource: (replaceSource: mixin _headerSource).
		 newMixin]
)
replaceSlot: slot = (
	^replacements at: slot ifAbsentPut:
		[ | newSlot = SlotDeclaration new. |
		 newSlot header: slot header.
		 newSlot name: slot name.
		 newSlot mixin: slot mixin.
		 newSlot metadata: (replaceSource: slot metadata).
		 newSlot]
)
replaceSource: source = (
	nil = source ifTrue: [^nil].
	keepSource ifTrue: [^source].
	^0
)
replaceSymbolTable = (
	| newSymbolTable |
	newSymbolTable:: (clusters at: String) symbols.

	(* Replace the written node. *)
	(clusters at: Array) replace: symbolTablePlaceholder with: newSymbolTable.
	(* Replace the written edges. *)
	replacements at: symbolTablePlaceholder put: newSymbolTable.

	(* registerRef: expects we've already traced the object. *)
	refs at: newSymbolTable put: 0.
)
public serialize: root = (
	| interpreter |
	nextRefIndex:: 1.

	(* Space optimization: ensure the most popular referents have short back refs. *)
	refs at: nil put: 0.
	analyze: nil.
	refs at: false put: 0.
	analyze: false.
	refs at: true put: 0.
	analyze: true.

	createSpecialClassClusters.

	enqueue: root.
	[stack isEmpty] whileFalse: [analyze: stack removeLast].

	replaceSymbolTable.

	stream uint16: 16r1984.
	stream leb128: version.
	stream leb128: orderedClusters size.
	stream leb128: refs size - 1. (* -1 accounts for symbol table placeholder *)
	orderedClusters do: [:c | c writeNodes].
	orderedClusters do: [:c | c writeEdges].
	writeRef: root.

	^stream asByteArray
)
public snapshotApp: app withRuntime: runtime keepSource: s = (
	| newPlatform newKernel methods objectStore |
	keepSource:: s.
	newKernel:: runtime InternalKernel new.
	newKernel symbolTable: symbolTablePlaceholder.
	newPlatform:: runtime Platform internalKernel: newKernel.
	newKernel messageLoop application: app; platform: newPlatform.
	objectStore:: newKernel buildObjectStore.

	slotOf: newKernel Object at: 1 put: nil. (* superclass *)
	methods:: slotOf: newKernel Object at: 2.
	1 to: methods size do: [:index |
		| method = methods at: index. |
		method selector = #'initializer`new' ifTrue: [
			method header: (Method headerForAccessModifier: #public primitive: 126 numArgs: 0).
			method bytecode: nil]].

	replaceClass: Activation with: newKernel Activation.
	replaceClass: Array with: newKernel Array.
	replaceClass: ByteArray with: newKernel ByteArray.
	replaceClass: String with: newKernel String.
	replaceClass: Closure with: newKernel Closure.
	replaceClass: Ephemeron with: newKernel Ephemeron.
	replaceClass: SmallInteger with: newKernel SmallInteger.
	replaceClass: MediumInteger with: newKernel MediumInteger.
	replaceClass: LargeInteger with: newKernel LargeInteger.
	replaceClass: WeakArray with: newKernel WeakArray.

	replaceClass: True with: newKernel True.
	replaceClass: False with: newKernel False.
	replaceClass: UndefinedObject with: newKernel UndefinedObject.
	replaceClass: Fraction with: newKernel Fraction.
	replaceClass: Object with: newKernel Object.
	replaceClass: Method with: newKernel Method.
	replaceClass: SlotDeclaration with: newKernel SlotDeclaration.
	replaceClass: Class with: newKernel Class.
	replaceClass: Metaclass with: newKernel Metaclass.
	replaceClass: InstanceMixin with: newKernel InstanceMixin.
	replaceClass: ClassMixin with: newKernel ClassMixin.

	^serialize: objectStore
)
writeRef: object = (
	^super writeRef: (replacements atOrItself: object)
)
writeWeakRef: object = (
	^super writeWeakRef: (replacements atOrItself: object)
)
) : (
)
class TemporaryClass withFormat: fmt = (|
	superclass = Object.
	methods = {}.
	enclosingObject = nil.
	mixin = nil.
	classIndex
	format = fmt.
	public name = 'PartiallyDeserializedObject'.
	subclasses
|) (
public vfBasicNew = (
	(* :pragma: primitive: 140 *)
	panic.
)
) : (
)
public class WriteStream = (|
data <ByteArray> ::= ByteArray new: 32 * 1024.
position <Integer> ::= 0.
|) (
public asByteArray ^<ByteArray> = (
	^data copyWithSize: position
)
ensureCapacity: availableNeeded = (
	position + availableNeeded > data size ifTrue:
		[data:: data copyWithSize: 2 * data size].
)
public float32: value <Float> = (
	ensureCapacity: 4.
	data float64At: position put: value.
	position:: 4 + position.
)
public float64: value <Float> = (
	ensureCapacity: 8.
	data float64At: position put: value.
	position:: 8 + position.
)
public int16: value <Integer> = (
	ensureCapacity: 2.
	data int16At: position put: value.
	position:: 2 + position.
)
public int32: value <Integer> = (
	ensureCapacity: 4.
	data int32At: position put: value.
	position:: 4 + position.
)
public int64: value <Integer> = (
	ensureCapacity: 8.
	data int64At: position put: value.
	position:: 8 + position.
)
public int8: value <Integer> = (
	ensureCapacity: 1.
	data int8At: position put: value.
	position:: 1 + position.
)
public leb128: value <Integer> = (
	| d p shift byte v |
	ensureCapacity: 10.
	d:: data.
	p:: position.
	v:: value.
	[byte:: v & 127.
	 v:: v >> 7.
	 v = 0] whileFalse:
		[d at: (p:: 1 + p) put: 128 | byte].
	d at: (p:: 1 + p) put: byte.
	position:: p.
)
public sleb128: value <Integer> = (
	| d p shift byte v |
	ensureCapacity: 10.
	d:: data.
	p:: position.
	v:: value.
	[byte:: v & 127.
	 v:: v >> 7.
	 v = 0 ifTrue: [byte < 64 ifTrue:
		[d at: (p:: 1 + p) put: byte. position:: p. ^self]].
	 v = -1 ifTrue: [byte >= 64 ifTrue:
		[d at: (p:: 1 + p) put: byte. position:: p. ^self]].
	 d at: (p:: 1 + p) put: 128 | byte] repeat.
)
public uint16: value <Integer> = (
	ensureCapacity: 2.
	data uint16At: position put: value.
	position:: 2 + position.
)
public uint32: value <Integer> = (
	ensureCapacity: 4.
	data uint32At: position put: value.
	position:: 4 + position.
)
public uint64: value <Integer> = (
	ensureCapacity: 8.
	data uint64At: position put: value.
	position:: 8 + position.
)
public uint8: value <Integer> = (
	ensureCapacity: 1.
	data uint8At: position put: value.
	position:: 1 + position.
)
) : (
)
private class: klass adoptInstance: object = (
	(* :pragma: primitive: 142 *)
	panic.
)
private classOf: object = (
	(* :pragma: primitive: 127 *)
	panic.
)
private closureWithNumCopied: numCopied <Integer> ^<Closure> = (
	(* :pragma: primitive: 146 *)
	panic.
)
private copiedOf: closure <Closure> at: index <Integer> ^<Object> = (
	(* :pragma: primitive: 154 *)
	panic.
)
private copiedOf: closure <Closure> at: index <Integer> put: value <Object> ^<Object> = (
	(* :pragma: primitive: 155 *)
	panic.
)
private definingActivationOf: closure <Closure> ^<Activation> = (
	(* :pragma: primitive: 148 *)
	panic.
)
private definingActivationOf: closure <Closure> put: value <Activation> = (
	(* :pragma: primitive: 149 *)
	panic.
)
private initialBCIOf: closure <Closure> ^<Integer> = (
	(* :pragma: primitive: 150 *)
	panic.
)
private initialBCIOf: closure <Closure> put: value <Integer> = (
	(* :pragma: primitive: 151 *)
	panic.
)
private isCanonical: object = (
	(* :pragma: primitive: 128 *)
	panic.
)
private kActivationCluster = ( ^-9 )
private kArrayCluster = ( ^-6 )
private kByteArrayCluster = ( ^-5 )
private kClosureCluster = ( ^-8 )
private kEphemeronCluster = ( ^-10 )
private kFloatCluster = ( ^-3 )
private kIntegerCluster = ( ^-1 )
private kLargeIntegerCluster = ( ^-2 )
private kStringCluster = ( ^-4 )
private kWeakArrayCluster = ( ^-7 )
private numArgsOf: closure <Closure> put: value <Integer> = (
	(* :pragma: primitive: 153 *)
	panic.
)
private numCopiedOf: closure <Closure> ^<Integer> = (
	(* :pragma: primitive: 147 *)
	panic.
)
private panic = (
	(* :pragma: primitive: 187 *)
)
sharedObjects = (
	^{
		nil.
		false.
		true.

		SmallInteger.
		MediumInteger.
		LargeInteger.
		Float.
		ByteArray.
		String.
		Array.
		WeakArray.
		Ephemeron.
		Activation.
		Closure.
		Metaclass.

		Fraction.
		Method.
		SlotDeclaration.
		Class.
		InstanceMixin.
		ClassMixin.

		Object.
		classOf: Object.
	}
)
private slotOf: object at: index = (
	(* :pragma: primitive: 130 *)
	panic.
)
private slotOf: object at: index put: value = (
	(* :pragma: primitive: 131 *)
	panic.
)
private version = ( ^0 )
) : (
)
