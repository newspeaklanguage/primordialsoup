class MirrorTestingModel = () (
public class Klass factory: arg = SuperKlass superFactory: arg + 0 (|
public publicSlot = 1.
protected protectedSlot = 2.
defaultSlot = 3.
private privateSlot = 4.
mutableSlot ::= 5.
immutableSlot = 6.
uninitializedSlot
|) (
class DefaultNestedClass = () (
) : (
)
public class Nested = () (
nestedMethod = (
)
) : (
)
private class PrivateNestedClass = () (
) : (
)
protected class ProtectedNestedClass = () (
) : (
)
public class PublicNestedClass = () (
) : (
)
transient defaultTransientSlot = 3.
transient immutableTransientSlot = 6.
transient literalsTestSlot = use: 'string literal'.
transient mutableTransientSlot ::= 5.
private transient privateTransientSlot = 4.
protected transient protectedTransientSlot = 2.
public transient publicTransientSlot = 1.
transient selectorsTestSlot = thisIsASelector: #thisIsNotASelector.
>>> binaryMethod = (
)
defaultMethod = (
)
keyword: kw1 method: kw2 = (
)
literalsTest = (
	nil ordinaryNotALiteral.
	self selfNotALiteral.
	super superNotALiteral.
	outer MirrorTestingModel outerNotALiteral.
	implicitReceiverNotALiteral.

	selectorAndALiteral.
	use: #selectorAndALiteral.

	use: 0.
	use: 16r7F.
	use: 16r7FFF.
	use: 16r10000.
	use: nil. (* Push oddball *)
	use: [false]. (* Local return oddball *)
	use: [^true]. (* Non-local return oddball *)
	use: #symbolLiteral.
	use: 'string literal'.
	use: 3.5. (* Fraction literal *)
)
private privateMethod = (
)
protected protectedMethod = (
)
public publicMethod = (
)
selectorsTest = (
	(* One of each lookup type. *)
	nil ordinaryExample.
	self selfExample.
	super superExample.
	outer MirrorTestingModel outerExample.
	implicitReceiverExample.
	nil <-: eventualExample.

	(* Selectors with special bytecodes. *)
	nil + nil.
	nil - nil.
	nil * nil.
	nil \\ nil.
	nil // nil.
	nil at: nil.
	nil at: nil put: nil.
	nil size.
	nil new.
	nil new: 0.
)
) : (
public classMethod = (
)
)
public class SuperKlass superFactory: arg = (|
superSlot = arg.
|) (
class SuperNestedClass = () (
) : (
)
transient superTransientSlot = init.
superMethod = (
)
) : (
superClassMethod = (
)
)
) : (
)
